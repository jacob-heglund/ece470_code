%% Do this first: Question 5: Are two spheres in collision (n times)
%{
clear all;
clc;

p = [-4.4019 3.4000 0.7552 4.6629 1.9165 -3.4475 -1.3261 -3.2256 -1.5510 4.6447 4.2306; 0.9964 -3.5844 -2.3319 4.0765 2.8271 0.2734 -1.2106 -0.1222 3.0871 2.3026 -3.0159; -3.5536 -4.4072 3.0511 0.2534 0.2566 -1.4259 1.1875 -0.2248 -2.9154 1.9235 0.1529];
r = [1.3762 1.8189 2.3044 2.4072 1.9692 2.4455 1.6451 2.4557 2.8350 1.6311 1.2838];
q = [3.3646; -1.0591; -1.8701];
s = 2.7371;

numObstacles = size(r,2);
collVec = zeros(1,numObstacles);

for i = 1:numObstacles
    collVec(i) = checkCollSphere(p(:,i), q, r(i), s);    
end
mat2str(collVec)
%}
%% Do this second: Question 1: Place bounding volumes for a given set of joint variables
%{
clear all;
clc;

S = [0.00000000 1.00000000 0.00000000 -1.00000000 0.00000000 1.00000000; 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000; -1.00000000 0.00000000 -1.00000000 0.00000000 -1.00000000 0.00000000; 0.00000000 0.00000000 -2.00000000 0.00000000 -4.00000000 0.00000000; 2.00000000 0.00000000 4.00000000 0.00000000 2.00000000 0.00000000; 0.00000000 -2.00000000 0.00000000 4.00000000 0.00000000 -6.00000000];
M = [0.00000000 1.00000000 0.00000000 2.00000000; 0.00000000 0.00000000 -1.00000000 6.00000000; -1.00000000 0.00000000 0.00000000 0.00000000; 0.00000000 0.00000000 0.00000000 1.00000000];
theta = [2.90886914; -0.12186585; 2.26212436; -0.49662699; -2.94066127; -0.87264905];

numJoints = size(S,2);
p = zeros(3, numJoints);

p(:,1) = [0;0;0];
p(:,2) = [2;0;0];
p(:,3) = [2;2;0];
p(:,4) = [4;2;0];
p(:,5) = [4;4;0];
p(:,6) = [2;4;0];
p(:,7) = [0;6;0];
p(:,8) = [2;6;0];

pFinal = moveSpheres(p, S, numJoints, theta);

mat2str(pFinal,6)
%}

%% Question 2: Detect collision at several different configurations (2 joints)
%{
clear all;
clc;

S = [1.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; -2.00 1.00];
M = [-1.00 0.00 0.00 -2.00; 0.00 0.00 -1.00 4.00; 0.00 -1.00 0.00 0.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 0.00 0.00 -2.00; 0.00 2.00 4.00 4.00; 0.00 0.00 0.00 0.00];
r_robot = [0.90 0.90 0.90 0.90];
p_obstacle = [4.61 -2.14 -1.52 0.76 -3.25 2.80 6.41 7.93 2.42 -1.09 8.45 -0.51 7.67 -7.17 -9.39 3.23 -9.93 2.62 7.04 9.86 3.09; -5.05 1.07 -9.31 -3.22 -8.30 6.63 3.17 1.05 7.78 8.52 -2.53 7.67 5.00 0.84 -7.18 9.71 -0.91 4.64 -7.32 -7.38 5.32; 2.53 9.69 3.91 5.71 -4.38 -9.89 -3.94 9.04 2.57 1.77 7.70 7.60 -7.63 6.36 -1.69 4.51 -3.65 4.93 0.63 8.36 -5.74];
r_obstacle = [1.46 3.22 3.54 2.29 3.76 3.40 1.22 1.69 2.19 4.38 4.67 4.86 4.37 3.67 1.67 2.15 1.34 0.74 2.03 3.26 1.19];
theta = [-0.26 -0.37 3.01 -0.44 0.38 1.41 -2.50 -1.60 -1.19 -0.16 -0.13; -0.30 -1.85 -1.71 -1.76 1.34 2.00 -2.11 -0.91 3.03 -2.82 -2.88];

numJoints = size(p_robot,2);
numObstacles = size(p_obstacle,2);
numConfigs = size(theta,2);

collVec = zeros(1,numConfigs);

for i = 1:numConfigs
    collVec(i) = checkColl(p_robot, p_obstacle, r_robot, r_obstacle, S, theta(:,i));
end

mat2str(collVec)
%}

%% Question 4: Detect collision along several straight-line paths (2 joints)
%{
clear all;
clc;

S = [0.00 -1.00; 1.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 2.00];
M = [0.00 0.00 -1.00 -4.00; 1.00 0.00 0.00 2.00; 0.00 -1.00 0.00 0.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 0.00 -2.00 -4.00; 0.00 2.00 2.00 2.00; 0.00 0.00 0.00 0.00];
r_robot = [0.90 0.90 0.90 0.90];
p_obstacle = [-3.28 4.97 3.49 3.48 3.93; 2.81 -1.65 4.52 -3.64 -1.23; 4.02 1.29 -4.57 -1.66 -2.03];
r_obstacle = [2.39 2.17 4.56 1.93 0.89];
theta_start = [1.84 -0.77 0.16 2.17 2.22 0.03 2.80; 0.73 1.70 3.07 -0.86 0.30 1.78 -3.06];
theta_goal = [-0.37 2.81 -0.62 -0.41 -0.73 -0.79 2.09; -2.90 -0.59 -1.17 -2.27 -1.83 0.80 -1.84];

numJoints = size(p_robot,2);
numObstacles = size(p_obstacle,2);
numLines = size(theta_start,2);

sVec = zeros(1,numLines);

for i = 1:numLines
    thetaA = theta_start(:,i);
    thetaB = theta_goal(:,i);
    
    sVec(i) = checkCollLine(thetaA, thetaB, p_robot, p_obstacle, r_robot, r_obstacle, S);    
end
mat2str(sVec)
%}

%% Question 3: Plan a collision-free path from start to goal (4 joints)

clear all;
clc;

S = [-1.00 0.00 0.00 0.00; 0.00 1.00 1.00 1.00; 0.00 0.00 0.00 0.00; 0.00 0.00 0.00 0.00; 0.00 0.00 0.00 0.00; -2.00 -4.00 -4.00 -6.00];
M = [0.00 1.00 0.00 -4.00; 1.00 0.00 0.00 2.00; 0.00 0.00 -1.00 0.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 -2.00 -4.00 -4.00 -6.00 -4.00; 0.00 -2.00 -2.00 0.00 2.00 2.00; 0.00 0.00 0.00 0.00 0.00 0.00];
r_robot = [0.90 0.90 0.90 0.90 0.90 0.90];
p_obstacle = [2.08 2.62 4.67 -4.14 -4.21 -4.70 2.54 1.78 -5.97 -2.43 1.57 -2.81 5.13 -1.17 -1.92 3.36 0.81 0.10 -0.32 1.99 -2.90 -3.35 0.63 -1.12 -0.83 -5.69 1.45 -0.64 4.85 4.28 3.00 -0.12 2.23 2.08 -0.04 0.68 0.55 2.60 3.52 -2.82 2.22 2.14 5.86 -4.48 -2.54 -4.00 0.48 -4.84 -4.74 -2.92 -4.57 -3.21 4.47 -1.98 5.15 5.07 4.41 0.10 5.67 2.04 5.53 -3.62 -4.13; 0.73 1.43 -2.65 -5.40 0.23 5.39 2.79 -3.32 -3.47 -0.30 3.89 5.70 -2.96 0.08 5.99 2.87 -5.16 -2.34 -4.38 -0.59 4.18 0.91 2.55 5.92 -4.70 3.33 5.64 -3.71 -0.40 -4.15 -2.75 5.10 -3.66 -2.84 1.92 4.49 -0.45 1.32 2.73 -2.31 -4.79 -0.06 2.98 -0.62 -2.24 -4.81 -0.69 -2.31 4.71 -2.47 -1.51 -0.22 -3.96 4.17 0.42 5.11 4.67 2.34 -1.66 -5.40 -2.89 5.79 -3.28; 5.21 2.20 -0.12 -3.20 0.29 -2.85 -1.64 -0.23 -5.86 -1.34 -0.63 5.12 3.27 -3.18 5.15 -1.19 2.54 -4.56 -3.11 -5.71 -0.78 -3.32 -0.26 1.68 -0.30 0.05 -0.58 -0.45 -3.99 -2.17 -4.04 -1.05 5.02 -2.16 4.22 -0.28 4.53 -2.09 5.48 2.75 -4.01 0.29 -4.24 -3.00 5.56 -3.64 3.75 5.09 1.43 -4.85 -1.63 -0.91 -2.44 2.97 4.72 -0.95 2.25 2.49 -2.84 -1.12 -1.74 5.20 3.63];
r_obstacle = [0.53 0.35 0.46 0.71 0.73 0.37 0.23 0.21 0.25 0.68 0.45 0.49 0.66 0.58 0.59 0.60 0.53 0.63 0.28 0.44 0.53 0.72 0.20 0.61 0.73 0.49 0.34 0.58 0.57 0.33 0.23 0.64 0.57 0.38 0.65 0.69 0.30 0.28 0.69 0.45 0.49 0.58 0.37 0.40 0.38 0.69 0.23 0.32 0.55 0.40 0.50 0.60 0.41 0.55 0.48 0.25 0.73 0.35 0.77 0.77 0.47 0.79 0.49];
theta_start = [-1.09; 0.83; -2.39; 2.55];
theta_goal = [-2.33; -1.25; -1.89; -2.61];

done = 0;
while done == 0
    thetaTemp = -3.14+(3.14+3.14)*rand(4,1);
    
    % check if the straight line between start and temp is clear
    % check if the straight line between end and temp is clear
    start = checkCollLine(theta_start, thetaTemp, p_robot, p_obstacle, r_robot, r_obstacle, S);
    goal = checkCollLine(theta_goal, thetaTemp, p_robot, p_obstacle, r_robot, r_obstacle, S);
    if ~start && ~goal
        thetaMid = thetaTemp;
        done = 1;
    end
end

q = [theta_start thetaMid theta_goal]














































