%% Question 1: Are two spheres in collision (n times)
%{
clear all;
clc;

p = [-3.2255 -0.2957 -1.5131 -0.2318 -0.5628 -2.4620 3.2563 2.6862 -3.7278 -4.6636 -1.8817 -3.9110 -4.8344 0.7134; -0.5558 0.0338 0.9856 3.2693 -4.1939 -1.4486 3.9627 1.8437 -3.1109 -1.7596 1.7409 2.7914 -0.6542 -0.5102; -1.9323 -0.8622 0.8694 3.3967 1.7247 -4.6168 -0.9951 -0.9023 -2.7401 -4.3685 1.9097 -2.8891 -0.3728 -0.4749];
r = [1.5466 2.9332 1.3962 2.2634 1.2933 1.1798 2.0799 2.5663 2.7229 2.4856 2.7205 2.7965 2.2736 2.4116];
q = [-1.8361; -0.7087; -0.8242];
s = 2.6273;

numObstacles = size(p,2);
collVec = zeros(1,numObstacles);

for i = 1:size(p,2);
    collVec(i) = checkCollSpheres(p(:,i), q, r(i), s);
end

mat2str(collVec)
%}
%% Question 2: Place bounding volumes for a given set of joint variables
%{
clear all;
clc;

S = [0.00000000 0.00000000 0.00000000 0.00000000 1.00000000 -1.00000000; 0.00000000 0.00000000 0.00000000 1.00000000 0.00000000 0.00000000; 0.00000000 0.00000000 1.00000000 0.00000000 0.00000000 0.00000000; 0.00000000 0.00000000 2.00000000 0.00000000 0.00000000 0.00000000; 0.00000000 1.00000000 -4.00000000 0.00000000 0.00000000 0.00000000; 1.00000000 0.00000000 0.00000000 4.00000000 -6.00000000 8.00000000];
M = [-1.00000000 0.00000000 0.00000000 2.00000000; 0.00000000 -1.00000000 0.00000000 8.00000000; 0.00000000 0.00000000 1.00000000 0.00000000; 0.00000000 0.00000000 0.00000000 1.00000000];
theta = [-2.23898674; -1.29178981; 1.86059643; 0.54867619; -1.97118082; 1.93937437];

numJoints = size(S,2)+2;
p = zeros(3, numJoints);
p(:,1) = [0;0;0];
p(:,2) = [2;0;0];
p(:,3) = [4;0;0];
p(:,4) = [4;2;0];
p(:,5) = [4;4;0];
p(:,6) = [4;6;0];
p(:,7) = [4;8;0];
p(:,8) = [2;8;0];

pFinal = moveSpheres(p, S, theta);
mat2str(pFinal)
%}

%% Question 4: Detect collision at several different configurations (2 joints)
%{
clear all;
clc;

S = [1.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 1.00];
M = [0.00 1.00 0.00 4.00; 0.00 0.00 1.00 0.00; 1.00 0.00 0.00 2.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 2.00 4.00 4.00; 0.00 0.00 0.00 0.00; 0.00 0.00 0.00 2.00];
r_robot = [0.90 0.90 0.90 0.90];
p_obstacle = [-0.57 4.05 -4.48 7.95 -4.70 6.27 -3.98 -3.88 -7.19 -7.91 8.33 -5.24 7.39 -5.95 0.03 -9.03 -5.39; -7.55 6.52 9.03 9.41 -2.50 9.85 4.25 8.11 -3.25 -4.91 -9.05 -1.90 9.15 7.27 -7.96 -8.36 3.09; 1.67 -0.25 -0.34 -4.83 4.00 -1.59 -4.78 6.78 -3.92 7.89 8.28 6.67 -4.13 7.49 2.18 -6.41 1.89];
r_obstacle = [3.19 3.54 1.73 0.82 3.89 0.62 2.84 4.90 4.47 4.22 3.21 4.84 4.45 2.23 3.30 3.26 4.52];
theta = [1.39 -2.29 -1.03 1.47 1.89 2.63 1.23 2.85 1.84 0.22 0.44 1.07 1.71 -2.18 -1.56 -2.12 -1.62 1.29 -2.22 -1.91; 2.21 1.64 -2.70 -1.51 -0.50 0.84 2.18 -0.55 -2.69 -2.39 1.48 -2.99 1.98 2.99 2.45 -0.71 -0.23 -2.80 1.29 2.54];

numJoints = size(p_robot,2);
numObstacles = size(p_obstacle,2);
numConfigs = size(theta,2);

collVec = zeros(1,numConfigs);

for i = 1:numConfigs
    thetaLocal = theta(:,i);
    collVec(i) = checkCollRobot(p_robot, p_obstacle, r_robot, r_obstacle, S, thetaLocal);
end

mat2str(collVec)
%}

%% Question 3: Detect collision along several straight-line paths (2 joints)
%{
clear all;
clc;

S = [-1.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 0.00; 0.00 1.00; -2.00 0.00];
M = [-1.00 0.00 0.00 -4.00; 0.00 0.00 1.00 0.00; 0.00 1.00 0.00 0.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 -2.00 -4.00 -4.00; 0.00 -2.00 -2.00 0.00; 0.00 0.00 0.00 0.00];
r_robot = [0.90 0.90 0.90 0.90];
p_obstacle = [2.26 -1.86 -4.21 0.38 1.00; 0.93 4.94 1.71 -2.35 -4.78; 4.96 0.60 -3.01 4.98 -1.35];
r_obstacle = [0.79 2.74 0.51 4.43 2.33];
theta_start = [2.10 1.57 2.83 -2.04 -0.45 1.27 0.67 -2.45 1.22 0.34; 1.03 1.98 0.58 0.17 1.85 2.66 0.88 1.46 1.89 2.51];
theta_goal = [-0.02 3.11 2.89 1.72 -0.92 -2.85 1.28 1.06 -2.95 -2.79; 1.39 1.60 1.59 2.73 0.44 1.82 1.80 3.07 0.42 2.56];

numJoints = size(p_robot,2);
numObstacles = size(p_obstacle,2);
numConfigs = size(theta_start,2);

sVec = zeros(1,numConfigs);

for i = 1:numConfigs
    thetaA = theta_start(:,i);
    thetaB = theta_goal(:,i);
    
    sVec(i) = checkCollLine(thetaA, thetaB, p_robot, p_obstacle, r_robot, r_obstacle, S);
end

mat2str(sVec)
%}
%% Question 5: Plan a collision-free path from start to goal (4 joints)

clear all;
clc;

S = [0.00 0.00 -1.00 0.00; 1.00 0.00 0.00 -1.00; 0.00 1.00 0.00 0.00; 0.00 2.00 0.00 0.00; 0.00 2.00 0.00 0.00; 2.00 0.00 2.00 4.00];
M = [0.00 1.00 0.00 -4.00; 0.00 0.00 -1.00 -2.00; -1.00 0.00 0.00 0.00; 0.00 0.00 0.00 1.00];
p_robot = [0.00 2.00 -2.00 -4.00 -4.00 -4.00; 0.00 2.00 2.00 2.00 0.00 -2.00; 0.00 0.00 0.00 0.00 0.00 0.00];
r_robot = [0.90 0.90 0.90 0.90 0.90 0.90];
p_obstacle = [-5.92 3.50 0.20 -4.21 -1.27 -1.38 -1.03 5.57 -3.88 1.94 2.31 1.36 1.30 2.18 3.09 -4.49 1.42 -1.72 -0.97 4.21 -1.42 -0.28 -1.46 -3.83 2.68 1.51 5.51 -2.14 -2.97 3.80 0.73 4.69 3.78 4.69 -3.04 -4.20 4.91 3.35 -4.02 -5.74 -2.46 5.34 -4.01 3.53 -4.09 -5.12 4.94 1.14 -0.37 -0.23 2.85 -3.06; 0.07 0.10 -5.88 -1.12 -4.07 -2.64 5.81 5.44 -2.26 -0.10 0.63 0.75 5.37 5.37 -5.37 4.38 -1.21 -4.85 0.44 -2.98 -0.10 -1.65 -1.69 -4.11 3.18 -0.07 4.87 -2.75 5.12 -2.65 2.95 1.30 0.12 -3.20 -0.36 0.18 -1.83 0.35 -0.87 5.62 -3.11 -5.24 -3.18 -4.46 -1.64 -2.84 -3.62 -2.94 5.50 0.58 -4.67 5.37; 4.27 0.41 1.26 -5.43 3.47 5.22 0.57 -5.14 4.08 5.96 4.84 -2.88 4.93 -2.88 -1.35 -2.69 0.97 -3.76 1.59 -4.53 -4.04 0.77 -4.21 1.95 -2.76 -3.39 0.30 4.91 -4.61 2.00 -2.22 3.56 4.97 -1.80 5.69 -1.41 3.42 -0.09 1.54 5.41 -3.79 1.62 5.43 -4.51 0.48 -3.10 -2.70 0.88 1.59 5.65 -0.86 1.27];
r_obstacle = [0.79 0.41 0.61 0.41 0.61 0.58 0.24 0.57 0.61 0.42 0.70 0.30 0.44 0.31 0.26 0.69 0.64 0.71 0.26 0.56 0.74 0.49 0.71 0.21 0.21 0.45 0.34 0.70 0.32 0.61 0.42 0.42 0.27 0.56 0.23 0.22 0.67 0.74 0.56 0.27 0.72 0.70 0.28 0.42 0.31 0.30 0.23 0.45 0.48 0.40 0.78 0.72];
theta_start = [-2.74; -1.56; -1.40; 0.88];
theta_goal = [1.95; -1.92; 2.19; 2.20];

done = 0;
counter = 0;
while done == 0
    thetaTemp = -3.14 + (3.14+3.14) * rand(4,1);
    
    % check line between start and temp
    start = checkCollLine(theta_start, thetaTemp,  p_robot, p_obstacle, r_robot, r_obstacle, S);
    goal = checkCollLine(theta_goal, thetaTemp,  p_robot, p_obstacle, r_robot, r_obstacle, S);

    if ~start && ~goal
        done = 1;
        theta_mid = thetaTemp;
    end
counter = counter + 1
end

q = [theta_start theta_mid theta_goal]


mat2str(q)

















































