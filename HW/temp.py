import numpy as np
import scipy as sp
from numpy import linalg as nl
from scipy import linalg as sl
import math
from sympy.matrices import zeros, Matrix, eye
import sympy.matrices as symm
import sympy as sym
from sympy import Symbol
from math import factorial
import random
import copy


    

def skew(x):
    return np.array([[0, -x[2], x[1]],
                     [x[2], 0, -x[0]],
                     [-x[1], x[0], 0]])
    
def skewsym(x):
    return Matrix([[0, -x[2], x[1]],
                     [x[2], 0, -x[0]],
                     [-x[1], x[0], 0]])
    
def dskew(x):
    return np.array[[x[2][1]],[x[0][2]],[x[1][0]]]
    
    
def vskew(x):
    return np.array([[0,-x[2],x[1],x[3]],
                     [x[2],0,-x[0],x[4]],
                     [-x[1],x[0],0,x[5]],
                     [0,0,0,0]])
    
def vskewsym(x):
    return Matrix([[0,-x[2],x[1],x[3]],
                     [x[2],0,-x[0],x[4]],
                     [-x[1],x[0],0,x[5]],
                     [0,0,0,0]])
    
    
def dvskew(x):
    return np.array([[x[2][1]],
                    [x[0][2]],
                    [x[1][0]],
                    [x[0][3]],
                    [x[1][3]],
                    [x[2][3]]])
    
    
def Jmaker(theta,s):
    joints = s.shape[1];
    temp = np.zeros((6,joints))
    for i in range(joints):
        if(i == 0):
            temp[:,0] = s[:,0].reshape((6))
            continue 
        cur = sl.expm(vskew(s[:,0])*theta[0])
        for y in range(1,i):
            cur = cur.dot(sl.expm(vskew(s[:,y])*theta[y]))
        temp[:,i] = admaker(cur).dot(s[:,i])
    return temp

def expsym(s,symb):
    w = s[:3,:]
    v = s[3:,:]
    R = eye(3)+sym.sin(symb)*skewsym(w)+(1-sym.cos(symb))*(skewsym(w)*skewsym(w))
    p = (eye(3)*symb+(1-sym.cos(symb))*skewsym(w)+(symb-sym.sin(symb))*(skewsym(w)*skewsym(w)))*v
    temp = eye(4)
    temp[:3,:3] = R
    temp[:3, 3] = p
    return temp

def exp(s,t):
    return sl.expm(vskew(s)*t)
    
def JmakerSym(s):
    joints = s.shape[1];
    temp = zeros(6,joints)
    for i in range(joints):
        if(i == 0):
            temp[:,0] = s[:,0].reshape(6,1)
            continue 
        tempT = Symbol('theta1')
        cur = expsym(s[:,0], tempT)
        for y in range(1,i):
            tempTstring = 'theta' + str(y+1)
            print(tempTstring)
            tempT = Symbol(tempTstring)
            tempa = expsym(s[:,y],tempT)
            cur = cur*tempa
        temp[:,i] = admakersym(cur)*s[:,i]
    return temp
            
            
        
    
def admaker(x):
    temp = np.zeros((6,6))
    temp[:3,:3] = np.copy(x[:3,:3])
    temp[3:,:3] = np.dot(skew(x[:3,3]), x[:3,:3])
    temp[3:,3:] = np.copy(x[:3,:3])
    return temp

def admakersym(x):
    temp = zeros(6,6)
    temp[:3,:3] = x[:3,:3]
    a = Matrix(x[:3,:3])
    b = Matrix(skewsym(x[:3,3]))
    temp[3:,:3] = a*b
    temp[3:,3:] = x[:3,:3]
    return temp

def rad(x):
    return math.radians(x)

def sind(x):
    return np.sin(rad(x))

def cosd(x):
    return np.cos(rad(x))

def TtoM(theta, s,M):
    T = np.identity(4)
    for i in range(theta.size):
        T = T.dot(sl.expm(vskew(s[:,i])*theta[i,0]))
    return T.dot(M)


def td(J, V):
    return nl.inv(np.transpose(J)@J+.1*np.identity(J.shape[1]))@np.transpose(J)@V

def col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta):
    coords = np.array([p_robot[0,1:-1],
                       p_robot[1,1:-1],
                       p_robot[2,1:-1]])
    
    r = np.zeros(r_robot.size+r_obstacle.size)
    r[:r_robot.size] = np.copy(r_robot)
    r[r_robot.size:] = np.copy(r_obstacle)
    
    
    centers = np.zeros((3,r.size))
    centers[0][1] = coords[0][0]
    centers[1][1] = coords[1][0]
    centers[2][1] = coords[2][0]
    centers[:,S[0].size+2:] = np.copy(p_obstacle[:,:])
    
    for i in range(S[0].size):
        startM = np.copy(M)
        if(i != S[0].size-1):
            startM[0][3] = coords[0][i+1]
            startM[1][3] = coords[1][i+1]
            startM[2][3] = coords[2][i+1]
        Mt = TtoM(theta[:i+1].reshape((i+1,1)), S[:,:i+1], startM)
        
        centers[0][i+2] = Mt[0][3]
        centers[1][i+2] = Mt[1][3]
        centers[2][i+2] = Mt[2][3] 
    for l in range(S[0].size+2):
        for y in range(S[0].size+2,r.size):
            if(l==y):
                continue
            dist = nl.norm(centers[:,l] - centers[:,y])
            #dist = np.sqrt((centers[0][l] - centers[0][y])**2 + (centers[1][l] - centers[1][y])**2 + (centers[2][l] - centers[2][y])**2)
            if dist < r[y]+r[l]:
                return True
    return False

def lineClear(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta_start, theta_end):
    sig = .01
    start = TtoM(theta_start,S,M)[:3,3]
    end = TtoM(theta_end,S,M)[:3,3]
    dist = nl.norm(start-end)
    count = 1+math.ceil(dist/sig)
    s = 0
# =============================================================================
#     count = 500
#     s=0
# =============================================================================
    for i in range(count):
        s = s + 1/count
        theta = (1-s)*theta_start[:,0]+s*theta_end[:,0]
        if(col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta)):
            return False
    return True

def checkS(answer, one, two , M, p_robot, r_robot, p_obstacle, r_obstacle, s):
    theta = (1-s)*answer[:,one]+s*answer[:,two]
    if(col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta)):
        return False
    return True

#2.1
# import numpy as np
#
# o_8in6 = np.array([[-0.86465269], [0.82630362], [-0.06385785]])
# R_8in6 = np.array([[-0.13702926, -0.22362984, -0.96499362], [0.24843698, 0.93528769, -0.25202381], [0.9589067, -0.27427473, -0.07260386]])
# v_in6 = np.array([[-0.89407917], [0.09611806], [0.13462584]])
# v_in8 = np.dot(R_8in6.transpose(),v_in6)
# print (v_in8)


#2.2
# import numpy as np
#
# o_0in1 = np.array([[0.77946818], [-0.29207508], [-0.05002444]])
# R_0in1 = np.array([[0.41135373, 0.07531686, -0.90835867], [-0.41434827, -0.87220253, -0.25995817], [-0.81185197, 0.48331161, -0.32757635]])
# p_in1 = np.array([[0.29166146], [0.97388404], [0.94189266]])
# print(np.dot(R_0in1.transpose(),(p_in1-o_0in1)))

#2.3
# import numpy as np
#
# p_1in6 = np.array([[0.96988805], [0.66115222], [-0.84176529]])
# R_1in6 = np.array([[-0.45012612, -0.68303063, -0.57520052], [-0.79791377, 0.59684472, -0.08432084], [0.4008991, 0.4210054, -0.81365494]])
#
# print(np.dot(-1*R_1in6.transpose(),p_1in6))
# print(R_1in6.transpose())

#2.5
#first do dot(R,v11) and dot(R,v12) to see which one yields the other v to see what reference R is in, then use that to find the unknown v2
# import numpy as np
#
# p = np.array([[0.70520807], [0.37488269], [0.11096347]])
# R = np.array([[-0.06212496, 0.0413951, -0.99720957], [0.88831503, 0.45779472, -0.03633748], [0.45501308, -0.88809371, -0.06521237]])
# v1_in1 = np.array([[-0.83521232], [-0.11003602], [-0.41060091]])
# v1_in0 = np.array([[0.45678774], [-0.77738536], [-0.25553397]])
# v2_in1 = np.array([[-0.58581683], [0.1908956], [-0.92825868]])
# print(np.dot(R,v1_in1))
# print(np.dot(R,v2_in1))

#2.6
#similiar concept as above
# import numpy as np
#
# p = np.array([[-0.42251986], [0.86649231], [0.62927196]])
# R = np.array([[0.26882626, -0.91232679, -0.30885639], [-0.85406366, -0.37403521, 0.36148711], [-0.44531754, 0.16660579, -0.87973564]])
# q1_in1 = np.array([[0.29949034], [-0.69373563], [0.04702705]])
# q1_in0 = np.array([[0.22954343], [0.86057578], [0.24462459]])
# q2_in1 = np.array([[0.49183988], [0.56077757], [-0.63457024]])
#
# print(p+np.dot(R.transpose(),q1_in1))
# print(p+np.dot(R.transpose(),q2_in1))

#2.7
# import numpy as np
#
# A1 = np.array([[0.01565479, -0.04307659, 0.99894912], [-0.14814357, -0.98814486, -0.0402891], [0.98884195, -0.14735717, -0.02185072]])
# A2 = np.array([[-0.01481046, 0.14758555, -0.9889384], [0.74861992, -0.65400907, -0.10881334], [-0.66283396, -0.74195056, -0.10079931]])
# A3 = np.array([[-0.20657174, -0.29254324, -0.96352916], [0.61566879, 0.84723171, -0.21060111], [0.86408485, -0.70349244, 0.06492309]])
# A4 = np.array([[0.85770033, -0.41332428, 0.30579925], [-0.5014972, -0.54140041, 0.67482306], [-0.11336091, -0.73215343, -0.67164028]])
# A5 = np.array([[0.22192252, -0.22570109, 0.82959407], [0.04494808, -1.06419999, -0.06777637], [0.87550944, -0.22729232, -0.15130074]])
#
# li = [A1, A2, A3, A4, A5]
#
# for ele in li:
#     print(ele.transpose()-np.linalg.inv(ele))
#     print(np.linalg.det(ele))
#     print(np.dot(ele,ele.transpose()))
#     print()
#     print()
#     print()
#     print()

#2.8
#Just note that the left side is dot product, the right side is matric multiplication. Thats why the answer has to be a 2d matric that is one row, so the final value is one element
#2.9
#look at notebook for hw notes


#3.1
# import numpy as np
#
# def skew(x):
#     return np.array([[0, -x[2], x[1]],
#                      [x[2], 0, -x[0]],
#                      [-x[1], x[0], 0]])
#
# theta = -.38
# a0 = np.array([[0],[1],[0]]);
# i = np.identity(3);
# r01 = i+np.sin(theta)*skew(a0)+(1-np.cos(theta))*(np.dot(skew(a0),skew(a0)))
# print(r01)


#3.4

# R_1in0 = np.array([[0.61693573, 0.43069901, -0.65870226], [-0.25976080, 0.90149650, 0.34616236], [0.74290957, -0.04245491, 0.66804412]])
# R_2in0 = np.array([[0.59765227, 0.44021768, -0.67008967], [-0.10359676, 0.87117300, 0.47992220], [0.79503426, -0.21740747, 0.56626364]])
#
#
#
# R_2in1 = np.dot(R_2in0,R_1in0.transpose())
# theta = np.arccos(.5*((R_2in1.trace())-1))
# print(theta)


#3.6

# =============================================================================
# R_1in0 = np.array([[0.02501471, -0.97456287, 0.22271389], [-0.74239466, 0.13108961, 0.65701269], [-0.66949565, -0.18177659, -0.72023111]])
# R_2in0 = np.array([[-0.49259267, -0.20609054, 0.84550526], [0.36518165, -0.93082900, -0.01413267], [0.78993343, 0.30180136, 0.53378003]])
# 
# R_1in2 = np.dot(R_2in0.transpose(),R_1in0)
# theta = np.arccos(.5*((R_1in2.trace())-1))
# print(theta)
# 
# w2ss = (1/(2*np.sin(theta))*(R_1in2-R_1in2.transpose()))
# w2= [[w2ss[2][1]],[w2ss[0][2]],[w2ss[1][0]]]
# w0 = np.dot(R_2in0, w2)
# 
# print (repr(w0))
# 
# =============================================================================


#3.12

# =============================================================================
# p_7in5 = np.array([[-0.007536794320], [-0.042535982589], [-0.336055409040]])
# R_7in5 = np.array([[-0.736054153316, 0.473912964376, -0.483353685806], [0.670896148104, 0.605791431656, -0.427685748877], [0.090125700249, -0.639079997753, -0.763841681650]])
# p_6in7 = np.array([[-0.167445546053], [0.981599095921], [-0.361332094734]])
# R_6in7 = np.array([[0.599321380715, 0.671715804877, 0.435444324909], [-0.308533195312, -0.308106192288, 0.899932131699], [0.738661729080, -0.673697596665, 0.022591995051]])
# print(repr(np.dot(R_7in5,p_6in7)))
# print(repr(np.dot(R_7in5,R_6in7)))
# print(p_6in7+p_7in5)
# =============================================================================

# =============================================================================
# #3.12
# p_8in1 = np.array([[0.337018707845], [-0.450508357247], [-0.430639839167]])
# R_8in1 = np.array([[0.102790646422, -0.656110896974, -0.747631308788], [-0.494932690281, 0.618231670898, -0.610599077292], [0.862830061542, 0.432791048856, -0.261182298272]])
# p_8in0 = np.array([[0.793404758816], [0.929196752233], [0.666456029411]])
# R_8in0 = np.array([[-0.265434439486, -0.274465787500, 0.924236490205], [0.416173258394, -0.897331804685, -0.146953908756], [0.869680618004, 0.345635883255, 0.352408085711]])
# 
# R_0in1 = np.dot(R_8in1,R_8in0.transpose())
# p_0in8 = np.dot(-R_8in0.transpose(), p_8in0)
# p_0in1 = np.dot(R_8in0,p_0in8)+p_8in1
# 
# print(repr(p_0in1))
# print(repr(R_0in1))
# =============================================================================


#3.2 - why does my solution below work for all of them?

# =============================================================================
# =============================================================================
# 
# w = np.array([[0.53846925], [0.81242336], [-0.22364961]])
# theta = 2.18157068
# 
# R = np.identity(3)+np.sin(theta)*skew(w)+(1-np.cos(theta))*np.dot(skew(w),skew(w))
# print(repr(R))
# # =============================================================================
# =============================================================================

 #3.3 same comment as above
# =============================================================================
# 
# R = np.array([[-0.86585350, 0.22205420, 0.44831870], [0.49722077, 0.48117089, 0.72197374], [-0.05540061, 0.84803686, -0.52703346]])
# theta = np.arccos(.5*((R.trace()-1)))
# wss = (1/(2*np.sin(theta))*(R-R.transpose()))
# w= [[wss[2][1]],[wss[0][2]],[wss[1][0]]]
# print(theta)
# print(repr(w))
# =============================================================================


# =============================================================================
# #3.7
#=============================================================================
# R_1in0 = np.array([[-0.07913139, -0.89037285, 0.44830170], [0.99258619, -0.02875635, 0.11809200], [-0.09225439, 0.45432286, 0.88604733]])
# w_01in1 = np.array([[0.32415040], [0.16525785], [0.16902335]])
# 
# answer = np.dot(R_1in0,skew(w_01in1))
# print(repr(answer))
# =============================================================================
# =============================================================================

# #1.3.8
 
# =============================================================================
# p_1in0 = np.array([[0.17406691], [0.07552821], [-0.65252260]])
# R_1in0 = np.array([[-0.52678973, -0.12648894, 0.84053146], [0.70705357, 0.48363842, 0.51591581], [-0.47177095, 0.86607992, -0.16534130]])
# v_01in0 = np.array([[0.38534722], [0.14584404], [-0.29169895]])
# w_01in1 = np.array([[-0.26908846], [0.41865262], [0.21608011]])
# v_in0 = np.array([[-0.30069157], [-0.85215296], [-0.61639783]])
# v_in0_dot = np.array([[0.65211490], [-0.66677673], [-0.89120302]])
# 
# R_0in1 = R_1in0.transpose()
# sw = skew(-1*w_01in1)
# 
# v1d = np.dot(np.dot(sw,R_0in1),v_in0)+np.dot(R_0in1, v_in0_dot)
# print(repr(v1d))
# 
# 
# =============================================================================
#1.3.9
 
# =============================================================================
# p_1in0 = np.array([[0.17975907], [0.96433520], [-0.78194974]])
# R_1in0 = np.array([[-0.42991992, -0.75547008, -0.49440248], [0.23721019, -0.62286727, 0.74549828], [-0.87114877, 0.20322725, 0.44698825]])
# v_01in0 = np.array([[0.84648309], [0.21652595], [-0.24502058]])
# w_01in1 = np.array([[-0.84409856], [0.38998070], [-0.38398111]])
# q_in0 = np.array([[0.77120091], [0.56506357], [-1.32988077]])
# q_in0_dot = np.array([[0.91876055], [0.30815368], [-0.01138439]])
# 
# R_0in1 = R_1in0.transpose()
# #sw = skew(-1*w_01in1)
# 
# #qd1 = -1*np.dot(R_0in1,v_01in0)+np.dot(np.dot(sw,R_0in1),q_in0)+np.dot(R_0in1,q_in0_dot)
# 
# #print(repr(qd1))
# #decided to solve for q0dot, then reanrrange equation for q1dot
# ws2 = skew(np.dot(R_1in0,w_01in1))
# q1 = -1*np.dot(R_0in1,p_1in0)+np.dot(R_0in1,q_in0)
# qd12 = np.dot(R_0in1,q_in0_dot-v_01in0-np.dot(np.dot(ws2,R_1in0),q1))
# print(repr(qd12))
#  
# =============================================================================
 
 
 #1.3.10 
 
# =============================================================================
# R_1in0 = np.array([[0.03168501, -0.37898764, -0.92485914], [-0.63093396, 0.71007736, -0.31258997], [0.77518927, 0.59342946, -0.21661736]])
# w_01in1 = np.array([[-0.67335358], [0.97850229], [-0.38407571]])
# p_1in0 = np.array([[0.17575731], [-0.15724560], [-0.42604005]])
# v_01in0 = np.array([[-0.46675335], [0.06953908], [-0.05876098]])
#  
# R_0in1 = R_1in0.transpose()
# R_0in1_dot = np.dot(skew(-1*w_01in1),R_0in1)
# v_0in1in1 = -1*np.dot(R_0in1_dot,p_1in0)-np.dot(R_0in1,v_01in0)
#  
# print(repr(v_0in1in1))
# =============================================================================
 

#1.3.11
# =============================================================================
#  
# R_1in0 = np.array([[0.65265134, 0.75765493, 0.00228981], [0.06288335, -0.05717962, 0.99638154], [0.75504431, -0.65014576, -0.08496224]])
# w_10in0 = np.array([[0.89706309], [-0.98526545], [-0.19865688]])
# 
# w_1in0in1 = np.dot(R_1in0.transpose(),-1*w_10in0)
# print(repr(w_1in0in1))
# 
# =============================================================================
 
#4.5
 
# =============================================================================
# T_6in2 = np.array([[-0.31978876, -0.35391290, 0.87890888, 0.65696511], [-0.57551062, 0.80944728, 0.11654451, 0.87850003], [-0.75267701, -0.46855177, -0.46253277, -0.25171258], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# v_in2 = np.array([[-0.84290183], [-0.76981313], [0.22305989],[0]])
# T_2in6 = np.linalg.inv(T_6in2)
# v_in6 = np.dot(T_2in6,v_in2)
# print(repr(v_in6)) #only take first 3 elements
# =============================================================================

#4.6
# =============================================================================
# T_1in2 = np.array([[0.20870743, -0.58885572, 0.78082658, 0.79172429], [-0.27997453, 0.72901717, 0.62461846, -0.83147926], [-0.93704614, -0.34897407, -0.01271331, 0.96328910], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# p_in1 = np.array([[0.24396586], [-0.35818813], [0.42151712]])
# 
# R_1in2 = T_1in2[:3,:3].copy()
# p_1in2 = T_1in2[:3,-1].copy()
# p_1in2.resize(3,1)
# 
# p2 = p_1in2+np.dot(R_1in2,p_in1)
# 
# print(repr(p2))
# 
# =============================================================================

#4.7
 
# =============================================================================
# T_8in6 = np.array([[-0.29207695, 0.13006485, 0.94750947, 0.70196635], [-0.02627864, 0.98924408, -0.14389436, 0.13694843], [-0.95603373, -0.06692748, -0.28551747, 0.05872512], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
#  
# print(repr(np.linalg.inv(T_8in6))) 
# =============================================================================


#4.8

# =============================================================================
# T_5in1 = np.array([[-0.59384741, -0.58466306, -0.55273353, 0.50196224], [0.11736369, 0.61669028, -0.77840790, -0.48549406], [0.79597174, -0.52712637, -0.29760171, 0.60519470], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# T_5in6 = np.array([[0.05330595, -0.96380229, 0.26123478, 0.28282668], [0.89606610, -0.06928864, -0.43847990, -0.03846373], [0.44070854, 0.25745722, 0.85993707, 1.02663309], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# T_1in5 = np.linalg.inv(T_5in1)
# T_6in5 = np.linalg.inv(T_5in6)
# 
# R_5in1 = T_5in1[0:3,0:3].copy()
# R_6in5 = T_6in5[0:3,0:3].copy()
# R_6in1 = np.dot(R_5in1, R_6in5)
# 
# p_5in1 = T_5in1[0:3,-1].copy()
# p_6in5 = T_6in5[0:3,-1].copy()
# 
# p_6in1 = p_5in1+np.dot(R_5in1,p_6in5)
# 
# T_6in1 = np.ndarray(shape=(4,4))
# T_6in1[:3,:3] = R_6in1.copy()
# T_6in1[:3,-1] = p_6in1.copy()
# T_6in1[3,:] [[0,0,0,1]]
# 
# print(repr(T_6in1))
# =============================================================================

#4.15

# =============================================================================
# 
# V_01in1 = np.array([[0.72953737], [-0.41611779], [-0.59671916], [-0.30434477], [-0.79576047], [-0.16456881]])
# T_1in0 = np.array([[0.02619013, -0.88100600, -0.47237961, 0.11558896], [-0.20142020, -0.46750090, 0.86073969, 0.49627744], [-0.97915473, 0.07260391, -0.18969631, 0.53662915], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# Vss = np.array([[0,-V_01in1[2],V_01in1[1],V_01in1[3]],
#                 [V_01in1[2],0,-V_01in1[0],V_01in1[4]],
#                 [-V_01in1[1],V_01in1[0],0,V_01in1[5]],
#                 [0,0,0,0]])
# Td_1in0 = np.dot(T_1in0,Vss)
# Vfss = np.dot(Td_1in0,np.linalg.inv(T_1in0))
# Vf = np.array([[Vfss[2][1]], [Vfss[0][2]], [Vfss[1][0]], [Vfss[0][3]], [Vfss[1][3]], [Vfss[2][3]]])
# print(repr(Vf))
# =============================================================================

#4.16 same method as above problem

#1.4.17
# =============================================================================
# 
# T = np.array([[1.00000000, 0.00000000, 0.00000000, -0.57421925], [0.00000000, 1.00000000, 0.00000000, 0.84966078], [0.00000000, 0.00000000, 1.00000000, -0.42889990], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# R= T[0:3,0:3]
# 
# theta = np.arccos(.5*(np.trace(R)-1))
# 
# print(repr(theta))
# 
# =============================================================================
 
#2.1.1
# =============================================================================
# M = np.array([[-0.25504262, 0.96511514, 0.05921171, -2.67921715], [-0.93034203, -0.22824556, -0.28699767, -1.51883034], [-0.26347098, -0.12828378, 0.95609953, -1.32695850], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# V_b = np.array([[0.08494587], [0.27875280], [0.24370278], [-0.77294454], [0.30469805], [-0.25009022]])
# 
# final = np.dot(M,sp.linalg.expm(vskew(V_b)))
# 
# print(repr(final))
#  
# =============================================================================


#2.1.2
 
# =============================================================================
# M = np.array([[-0.64500476, 0.76413784, -0.00788744, -1.36541727], [0.39691807, 0.34382076, 0.85102487, -1.28272362], [0.65301217, 0.54578443, -0.52506615, -1.99852561], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# S = np.array([[0.00000000], [0.00000000], [0.00000000], [0.35271743], [-0.93473592], [0.04311826]])
# theta = 0.91523156
# 
# final = np.dot(sp.linalg.expm(vskew(S)*theta),M)
# 
# print(repr(final))
# =============================================================================

#2.1.3 - having problems with S vs B in that I think the coding of the problem gets it wrong
#version 1

# =============================================================================
# 
# M = np.array([[0.86424917, -0.49254179, -0.10235209, -2.82410958], [-0.39721913, -0.54329137, -0.73962927, -2.20330567], [0.30869132, 0.67988019, -0.66518614, 2.49317424], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# theta = -1.76295106
# a_in0 = np.array([[0.82458852], [0.50255840], [-0.25978610]])
# q_in0 = np.array([[0.72344897], [-0.37335434], [-0.27663643]])
# 
# linear = -1*np.dot(skew(a_in0),q_in0)
# 
# S = np.array([[a_in0[0][0]], 
#               [a_in0[1][0]],
#               [a_in0[2][0]], 
#               [linear[0][0]],
#               [linear[1][0]],
#               [linear[2][0]]])
# B = np.dot((admaker(np.linalg.inv(M))),S)
# print(repr(S))
# 
# =============================================================================

#version 2

# =============================================================================
# M = np.array([[0.54403751, 0.83805382, 0.04109734, -2.51974394], [-0.43272426, 0.32220069, -0.84198363, -2.13003993], [-0.71886919, 0.44028686, 0.53793547, 2.26272037], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# theta = -0.68933391
# a_in0 = np.array([[0.75539946], [-0.21928032], [-0.61748506]])
# 
# 
# S = np.array([[0],[0],[0],
#               [a_in0[0][0]],
#               [a_in0[1][0]],
#               [a_in0[2][0]]])
# B = np.dot((admaker(np.linalg.inv(M))),S)
# print(repr(B))
# 
# =============================================================================

#2.1.4

# =============================================================================
# 
# V = np.array([[ 3], [-7], [-2], [ 8], [ 7], [ 5]])
# 
# final = vskew(V)
# print(repr(final))
# 
# =============================================================================


#2.1.5
# =============================================================================
# V_mat = np.array([[ 0,  5,  7,  9], [-5,  0, -8, -2], [-7,  8,  0, 10], [ 0,  0,  0,  0]])
# final = dvskew(V_mat)
# print(repr(final))
# =============================================================================


#2.1.6
# =============================================================================
#  
# T = np.array([[0.54264147, -0.17498984, -0.82153441, -0.58497185], [-0.83125503, 0.02860370, -0.55515485, -0.75531954], [0.12064538, 0.98415465, -0.12993963, 0.82506479], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# final = admaker(T)
# print(repr(final))
# =============================================================================


#2.1.7
 
# =============================================================================
# V_01in1 = np.array([[0.17138411], [0.85302949], [0.70851774], [-0.47763456], [0.76966860], [0.27269967]])
# T_1in0 = np.array([[-0.82747105, -0.37347060, 0.41929866, -0.37006758], [-0.17550556, -0.53729964, -0.82492842, -0.84940572], [0.53337553, -0.75619363, 0.37905373, -0.42204198], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# ADT = admaker(T_1in0)
# V_01in0 = np.dot(ADT,V_01in1)
# print(repr(V_01in0))
# =============================================================================


#2.1.8
 
# =============================================================================
# V_01in0 = np.array([[0.24047267], [-0.16934240], [-0.43762894], [-0.62069847], [0.80199569], [-0.46430821]])
# T_1in0 = np.array([[0.24806106, 0.14711249, 0.95750907, 0.54469301], [-0.42933090, -0.86933976, 0.24479247, 0.07566163], [0.86841274, -0.47181171, -0.15248941, -0.71715672], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# ADTinv = (admaker(np.linalg.inv(T_1in0)))
# V_01in1 = np.dot(ADTinv,V_01in0)
# print(repr(V_01in1))
# =============================================================================


#2.1.9 
 
# =============================================================================
# T = np.array([[1.00000000, 0.00000000, 0.00000000, 0.67854260], [0.00000000, 1.00000000, 0.00000000, -0.26994151], [0.00000000, 0.00000000, 1.00000000, 0.48089272], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# I = np.identity(3)
# TI = np.zeros((4,4))
# TI[:3,:3] = np.copy(I)
# TI[3,3] = 1
# 
# expeq = np.dot(T,np.linalg.inv(TI))
# 
# stheta = sp.linalg.logm(expeq)
# theta = np.linalg.norm(stheta)
# s = dvskew(stheta/theta)
# print(theta)
# print(repr(s))
# =============================================================================


#2.1.10

# =============================================================================
# S = np.array([[-0.06030933], [0.85898226], [-0.50844100], [0.21364778], [-0.35864541], [0.47309816]])
# theta = 0.50448624
# 
# I = np.identity(3)
# TI = np.zeros((4,4))
# TI[:3,:3] = np.copy(I)
# TI[3,3] = 1
# 
# T = np.dot(sp.linalg.expm(vskew(S)*theta),TI)
# 
# print(repr(T))
# =============================================================================

#2.2.1
# revolute joint
# =============================================================================
# q = np.array([[0],[5],[-4]])
# a = np.array([[0],[-cosd(60)],[-sind(60)]])
# s = np.zeros((6,1))
# s[:3]= a;
# s[3:] = -1*np.dot(skew(a),q)
# m = np.array([[0,1,0,0],
#               [cosd(30),0,-cosd(60),6],
#               [-sind(30),0,-sind(60),4],
#               [0,0,0,1]])
# B = np.dot(admaker(np.linalg.inv(m)),s)
#     
# print(repr(m))
# print(repr(B))
# 
# =============================================================================
#Prismatic Joint
# =============================================================================
# a = np.array([[1],[0],[0]])
# s = np.zeros((6,1))
# s[:3]= 0;
# s[3:] = a;
# m = np.array([[0,cosd(60),cosd(30),9],
#               [0,-sind(60),sind(30),-2],
#               [1,0,0,0],
#               [0,0,0,1]])
# B = np.dot(admaker(np.linalg.inv(m)),s)
# 
#     
# print(repr(m))
# print(repr(B))
# =============================================================================

 
# 2.3.1;
#prismatic
# =============================================================================
# M = np.array([[0,-1,0,-2],
#               [0,0,1,2],
#               [-1,0,0,0],
#               [0,0,0,1]])
# 
# S = [[0],[0],[0],[0],[1],[0]]
# B = np.dot(admaker(np.linalg.inv(M)),S)
# 
# 
# print(repr(M))
# print(repr(B))
# =============================================================================

#revolute
# =============================================================================
# M = np.array([[0,0,1,0],
#               [0,-1,0,0],
#               [1,0,0,4],
#               [0,0,0,1]])
# 
# a = np.array([[0],[0],[1]])
# q = np.array([[0],[0],[2]])
# bottom = np.dot(-skew(a),q)
# S = np.zeros((6,1))
# S[:3] = np.copy(a)
# S[3:] = np.copy(bottom)
#     
# B = np.dot(admaker(np.linalg.inv(M)),S)
# 
# 
# print(repr(M))
# print(repr(B))
# 
# =============================================================================


#2.3.2
 
# =============================================================================
# M = np.array([[0,1,0,0],
#               [0,0,-1,6],
#               [-1,0,0,-6],
#               [0,0,0,1]])
#     
# a1 = np.array([[-1],[0],[0]])
# q1 = np.array([[0],[0],[2]])
# bottom1 = np.dot(-skew(a1),q1)
# S1 = np.zeros((6,1))
# #S1[:3] = np.copy(a1)
# S1[3:] = np.copy(a1)
# 
# a2 = np.array([[0],[1],[0]])
# q2 = np.array([[0],[4],[-4]])
# bottom2 = np.dot(-skew(a2),q2)
# S2 = np.zeros((6,1))
# S2[:3] = np.copy(a2)
# S2[3:] = np.copy(bottom2)
# 
# a3 = np.array([[-1],[0],[0]])
# q3 = np.array([[2],[0],[-2]])
# bottom3 = np.dot(-skew(a3),q3)
# S3 = np.zeros((6,1))
# #S3[:3] = np.copy(a3)
# S3[3:] = np.copy(a3)
# =============================================================================

# =============================================================================
# a4 = np.array([[0],[0],[-1]])
# q4 = np.array([[-4],[4],[0]])
# bottom4 = np.dot(-skew(a4),q4)
# S4 = np.zeros((6,1))
# #S4[:3] = np.copy(a4)
# S4[3:] = np.copy(a4)
# 
# a5 = np.array([[0],[0],[1]])
# q5 = np.array([[4],[0],[-6]])
# bottom5 = np.dot(-skew(a5),q5)
# S5 = np.zeros((6,1))
# S5[:3] = np.copy(a5)
# S5[3:] = np.copy(bottom5)
# =============================================================================

# =============================================================================
# a6 = np.array([[0],[0],[1]])
# q6 = np.array([[0],[0],[12]])
# bottom6 = np.dot(-skew(a6),q6)
# S6 = np.zeros((6,1))
# #S6[:3] = np.copy(a6)
# S6[3:] = np.copy(a6)
# 
# a7 = np.array([[0],[-1],[0]])
# q7 = np.array([[-10],[0],[0]])
# bottom7 = np.dot(-skew(a7),q7)
# S7 = np.zeros((6,1))
# S7[:3] = np.copy(a7)
# S7[3:] = np.copy(bottom7)
# =============================================================================

# =============================================================================
# Sfinal = np.zeros((6,7))
# Sfinal[:,0] = np.copy(S1[:,0])
# Sfinal[:,1] = np.copy(S2[:,0])
# Sfinal[:,2] = np.copy(S3[:,0])
# #Sfinal[:,3] = np.copy(S4[:,0])
# #Sfinal[:,4] = np.copy(S5[:,0])
# #Sfinal[:,5] = np.copy(S6[:,0])
# #Sfinal[:,6] = np.copy(S7[:,0])
# 
# Bfinal = np.zeros((6,3))
# Bfinal[:,0] = np.dot(admaker(np.linalg.inv(M)),np.copy(S1[:,0]))
# Bfinal[:,1] = np.dot(admaker(np.linalg.inv(M)),np.copy(S2[:,0]))
# Bfinal[:,2] = np.dot(admaker(np.linalg.inv(M)),np.copy(S3[:,0]))
# print(repr(M))
# print(repr(Bfinal))
# =============================================================================


#2.3.3
# =============================================================================
# theta = .43
#  
# M = np.array([[0,0,-1,-2],
#               [1,0,0,2],
#               [0,-1,0,0],
#               [0,0,0,1]])
# 
# #S = np.array([[0],[0],[0],[0],[0],[1]])#
# a = np.array([[0],[0],[1]])
# q = np.array([[-2],[0],[0]])
# bottom = np.dot(-skew(a),q)
# S = np.zeros((6,1))
# S[:3] = np.copy(a)
# S[3:] = np.copy(bottom)
# T = np.dot(sp.linalg.expm(vskew(S)*theta),M)
# 
# print(repr(T))
# =============================================================================

    
 #2.3.4
# =============================================================================
# theta = np.array([[-0.63, -0.08, 0.13, 0.51]])
# M = np.array([[-1,0,0,0],
#               [0,-1,0,-6],
#               [0,0,1,0],
#               [0,0,0,1]])
#     
# a1 = np.array([[0],[-1],[0]])
# q1 = np.array([[0],[0],[2]])
# bottom1 = np.dot(-skew(a1),q1)
# S1 = np.zeros((6,1))
# #S1[:3] = np.copy(a1)
# S1[3:] = np.copy(a1)
# 
# a2 = np.array([[0],[0],[1]])
# q2 = np.array([[2],[-2],[0]])
# bottom2 = np.dot(-skew(a2),q2)
# S2 = np.zeros((6,1))
# S2[:3] = np.copy(a2)
# S2[3:] = np.copy(bottom2)
# 
# a3 = np.array([[0],[0],[1]])
# q3 = np.array([[2],[0],[-2]])
# bottom3 = np.dot(-skew(a3),q3)
# S3 = np.zeros((6,1))
# #S3[:3] = np.copy(a3)
# S3[3:] = np.copy(a3)
# 
# a4 = np.array([[0],[-1],[0]])
# q4 = np.array([[2],[-6],[0]])
# bottom4 = np.dot(-skew(a4),q4)
# S4 = np.zeros((6,1))
# S4[:3] = np.copy(a4)
# S4[3:] = np.copy(bottom4)
# 
# # =============================================================================
# # a5 = np.array([[0],[0],[1]])
# # q5 = np.array([[4],[0],[-6]])
# # bottom5 = np.dot(-skew(a5),q5)
# # S5 = np.zeros((6,1))
# # S5[:3] = np.copy(a5)
# # S5[3:] = np.copy(bottom5)
# # 
# # a6 = np.array([[0],[0],[1]])
# # q6 = np.array([[0],[0],[12]])
# # bottom6 = np.dot(-skew(a6),q6)
# # S6 = np.zeros((6,1))
# # #S6[:3] = np.copy(a6)
# # S6[3:] = np.copy(a6)
# # 
# # a7 = np.array([[0],[-1],[0]])
# # q7 = np.array([[-10],[0],[0]])
# # bottom7 = np.dot(-skew(a7),q7)
# # S7 = np.zeros((6,1))
# # S7[:3] = np.copy(a7)
# # S7[3:] = np.copy(bottom7)
# # =============================================================================
# 
# 
# one = np.dot(sp.linalg.expm(vskew(S1)*theta[0,0]),sp.linalg.expm(vskew(S2)*theta[0,1]))
# two = np.dot(one,sp.linalg.expm(vskew(S3)*theta[0,2]))
# three = np.dot(two,sp.linalg.expm(vskew(S4)*theta[0,3]))
# 
# final = np.dot(three,M)
# 
# print(repr(final))
# 
# 
# =============================================================================


#3.1.1
# =============================================================================
# 
# N = np.array([[-9, -4,  7], [-2, -6, -4], [-7, -8,  0]])
# 
# 
# S = sp.linalg.expm(N)
# 
# print(repr(S))
# =============================================================================


#3.1.2
# =============================================================================
# S = np.array([[-0.94], [-0.60], [-0.41], [-0.75], [-0.50], [-0.84]])
# theta = -0.35
# thetadot = 0.41
# 
# Ss = vskew(S)
# dt = np.dot(Ss,sp.linalg.expm(Ss*theta))*thetadot
# print(repr(dt))
# =============================================================================

#3.1.3 - mutiple choice but confusing as fuck!
 
#3.1.4
# =============================================================================
# theta_1 = 0.26
# a = np.array([[0],[0],[1]])
# q = np.array([[0],[0],[0]])
# # =============================================================================
# # s = np.zeros((6,1))
# # s[:3,:] = a;
# # s[3:, : ] = np.dot(skew(a),q)
# # =============================================================================
# s = np.array([[0],[0],[0],[-1],[0],[0]])
# print(repr(s))
# 
# =============================================================================
    

#3.1.5
# =============================================================================
# theta_1 = -0.85
# theta_2 = 0.13
# a1 = np.array([[0],[0],[1]])
# q1 = np.array([[0],[0],[2]])
# a2 = np.array([[1],[0],[0]])
# q2 = np.array([[0],[2],[0]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# s2 = np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
# J = np.zeros((6,2))
# ex = np.dot(admaker(sp.linalg.expm(vskew(s1)*theta_1)),s2)
# J[:,0] = s1[:,0]
# J[:,1] = ex[:,0]
# #J[:,0] = s1
# print(repr(J))
# =============================================================================


#3.1.6
# =============================================================================
# theta_1 = -0.07
# theta_2 = -0.66
# thetadot_1 = -0.84
# thetadot_2 = -0.08
# 
# a1 = np.array([[0],[-1],[0]])
# q1 = np.array([[0],[0],[2]])
# a2 = np.array([[1],[0],[0]])
# q2 = np.array([[0],[2],[0]])
# s1 = np.zeros((6,1))
# s1[3:,:] = a1;
# #s1[3:, : ] = -np.dot(skew(a1),q1)
# s2 = np.zeros((6,1))
# s2[3:,:] = a2;
# #s2[3:, : ] = -np.dot(skew(a2),q2)
# J = np.zeros((6,2))
# ex = np.dot(admaker(sp.linalg.expm(vskew(s1)*theta_1)),s2)
# J[:,0] = s1[:,0]
# J[:,1] = ex[:,0]
# V = np.dot(J,np.array([[thetadot_1],[thetadot_2]]))
# #J[:,0] = s1
# print(repr(V))
# =============================================================================


#3.1.7
# =============================================================================
# theta_1 = -0.89
# thetadot_1 = 0.37
# a1 = np.array([[1],[0],[0]])
# q1 = np.array([[0],[0],[2]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# V = s1*thetadot_1
# 
# print(repr(V))
# =============================================================================


#3.2.1
# =============================================================================
# theta = np.array([[0.90], [0.98], [-0.17], [-0.07], [0.53], [-0.98], [-0.82]])
# 
# a1 = np.array([[0],[0],[-1]])
# s1 = np.zeros((6,1))
# s1[3:,:] = a1;
# 
# 
# a2 = np.array([[-1],[0],[0]])
# q2 = np.array([[-2],[-2],[0]])
# s2 = np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
# 
# a3 = np.array([[0],[-1],[0]])
# q3 = np.array([[-4],[-2],[0]])
# s3 = np.zeros((6,1))
# s3[:3,:] = a3;
# s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# a4 = np.array([[-1],[0],[0]])
# q4 = np.array([[-6],[-4],[0]])
# s4 = np.zeros((6,1))
# s4[:3,:] = a4;
# s4[3:, : ] = -np.dot(skew(a4),q4)
# 
# a5 = np.array([[0],[-1],[0]])
# q5 = np.array([[-6],[-6],[0]])
# s5= np.zeros((6,1))
# s5[:3,:] = a5;
# s5[3:, : ] = -np.dot(skew(a5),q5)
# 
# a6 = np.array([[0],[0],[-1]])
# q6 = np.array([[-4],[-6],[0]])
# s6= np.zeros((6,1))
# s6[:3,:] = a6;
# s6[3:, : ] = -np.dot(skew(a6),q6)
# 
# a7 = np.array([[1],[0],[0]])
# s7 = np.zeros((6,1))
# s7[3:,:] = a7;
# 
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# s[:,3] = s4.reshape((6))
# s[:,4] = s5.reshape((6))
# s[:,5] = s6.reshape((6))
# s[:,6] = s7.reshape((6))
# 
# J = Jmaker(theta,s)
# print(repr(J))
# 
# =============================================================================


#3.2.2

# =============================================================================
# theta = np.array([[-0.03], [0.54], [-0.40]])
# thetadot = np.array([[0.50], [0.21], [0.36]])
# 
# a1 = np.array([[0],[1],[0]])
# q1 = np.array([[-4],[0],[0]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# 
# 
# a2 = np.array([[0],[1],[0]])
# q2 = np.array([[-6],[0],[0]])
# s2 = np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
#  
# a3 = np.array([[0],[0],[1]])
# q3 = np.array([[-8],[0],[0]])
# s3 = np.zeros((6,1))
# s3[:3,:] = a3;
# s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# 
# J = Jmaker(theta,s)
# V = J.dot(thetadot)
# 
# print(repr(V))
# =============================================================================



# =============================================================================
# #3.2.3
#  
# theta = np.array([[0.06], [0.94], [-0.79]])
# 
#  
# a1 = np.array([[0],[0],[-1]])
# s1 = np.zeros((6,1))
# s1[3:,:] = a1;
# 
# 
# a2 = np.array([[1],[0],[0]])
# s2 = np.zeros((6,1))
# s2[3:,:] = a2;
#  
# a3 = np.array([[0],[0],[1]])
# q3 = np.array([[0],[4],[-6]])
# s3 = np.zeros((6,1))
# s3[:3,:] = a3;
# s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# 
# J = Jmaker(theta,s)
# M = np.array([[0,-1,0,0],
#               [0,0,-1,4],
#               [1,0,0,-4],
#               [0,0,0,1]])
# T = sl.expm(vskew(s1)*theta[0]).dot(sl.expm(vskew(s2)*theta[1])).dot(sl.expm(vskew(s3)*theta[2])).dot(M)
# J1 = admaker(nl.inv(T)).dot(J)
# 
# 
# 
# print(repr(J1))
# =============================================================================


#3.2.4
# =============================================================================
# theta = np.array([[0.71], [0.43], [-0.61], [-0.50]])
# thetadot = np.array([[-0.55], [-0.46], [0.75], [-0.14]])
#  
# a1 = np.array([[0],[1],[0]])
# q1 = np.array([[0],[0],[-2]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# 
# 
# a2 = np.array([[0],[0],[-1]])
# q2 = np.array([[0],[0],[-4]])
# s2 = np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
#  
# a3 = np.array([[0],[-1],[0]])
# q3 = np.array([[0],[2],[-6]])
# s3 = np.zeros((6,1))
# s3[:3,:] = a3;
# s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# a4 = np.array([[1],[0],[0]])
# s4 = np.zeros((6,1))
# s4[3:,:] = a4;
# 
# 
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# s[:,3] = s4.reshape((6))
# 
# 
# J = Jmaker(theta,s)
# M = np.array([[0,0,1,0],
#               [-1,0,0,-2],
#               [0,-1,0,-6],
#               [0,0,0,1]])
# T = sl.expm(vskew(s1)*theta[0]).dot(sl.expm(vskew(s2)*theta[1])).dot(sl.expm(vskew(s3)*theta[2])).dot(sl.expm(vskew(s4)*theta[3])).dot(M)
# J1 = admaker(nl.inv(T)).dot(J)
# 
# V1 = J1.dot(thetadot)
# 
# print(repr(V1))
# =============================================================================

#3.3.2

# =============================================================================
# a1 = Matrix([[1],[0],[0]])
# #q1 = Matrix([[0],[0],[-2]])
# s1 = zeros(6,1)
# s1[3:,:] = a1;
# #s1[3:, : ] = -1*skewsym(a1)*q1
# 
# 
# a2 = Matrix([[0],[-1],[0]])
# #q2 = Matrix([[-4],[0],[0]])
# s2 = zeros(6,1)
# s2[3:,:] = a2;
# #s2[3:, : ] = -1*skewsym(a2)*q2
#  
# a3 = Matrix([[0],[-1],[0]])
# #q3 = np.array([[0],[0],[0]])
# s3 = zeros(6,1)
# s3[3:,:] = a3;
# #s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# s = zeros(6,3)
# s[:,0] = s1.reshape(6,1)
# s[:,1] = s2.reshape(6,1)
# s[:,2] = s3.reshape(6,1)
# 
# eT = expsym(s[:,0],Symbol("theta1"))*expsym(s[:,1],Symbol("theta2"))*expsym(s[:,2],Symbol("theta3"))
# 
# M = Matrix([[1,0,0,0],
#             [0,-1,0,-6],
#             [0,0,-1,-2],
#             [0,0,0,1]])
# 
# T = eT*M
# 
# print(repr(T))
# 
# 
# =============================================================================


#HW 3.3.3

# =============================================================================
# a1 = Matrix([[0],[0],[1]])
# #q1 = Matrix([[0],[0],[-2]])
# s1 = zeros(6,1)
# s1[3:,:] = a1;
# #s1[3:, : ] = -1*skewsym(a1)*q1
# 
# 
# a2 = Matrix([[0],[1],[0]])
# q2 = Matrix([[-4],[0],[0]])
# s2 = zeros(6,1)
# s2[:3,:] = a2;
# s2[3:, : ] = -1*skewsym(a2)*q2
#  
# a3 = Matrix([[0],[-1],[0]])
# #q3 = np.array([[0],[0],[0]])
# s3 = zeros(6,1)
# s3[3:,:] = a3;
# #s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# s = zeros(6,3)
# s[:,0] = s1.reshape(6,1)
# s[:,1] = s2.reshape(6,1)
# s[:,2] = s3.reshape(6,1)
# 
# J = JmakerSym(s)
# 
# print(repr(J))
# 
# =============================================================================

#3.4.1

# =============================================================================
# theta = np.array([[0.63363842], [0.78552745], [0.85125206], [-0.07966896], [-0.38768202], [0.58573894]])
# V = np.array([[-0.29957663], [-0.94056193], [1.27480133], [4.76822220], [3.29918836], [6.59357464]])
# 
# M = np.array([[-1,0,0,0],
#               [0,0,-1,8],
#               [0,-1,0,-8],
#               [0,0,0,1]])
#     
# a1 = np.array([[0],[1],[0]])
# q1 = np.array([[0],[2],[-2]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# 
#  
# a2 = np.array([[0],[0],[1]])
# q2 = np.array([[0],[4],[-2]])
# s2 = np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
# 
# a3 = np.array([[-1],[0],[0]])
# s3 = np.zeros((6,1))
# s3[3:,:] = a3;
# 
# a4 = np.array([[-1],[0],[0]])
# q4 = np.array([[0],[6],[-4]])
# s4 = np.zeros((6,1))
# s4[:3,:] = a4;
# s4[3:, : ] = -np.dot(skew(a4),q4)
# 
# a5 = np.array([[-1],[0],[0]])
# q5 = np.array([[0],[8],[-4]])
# s5= np.zeros((6,1))
# s5[:3,:] = a5;
# s5[3:, : ] = -np.dot(skew(a5),q5)
#  
# a6 = np.array([[0],[0],[-1]])
# q6 = np.array([[0],[8],[-6]])
# s6= np.zeros((6,1))
# s6[:3,:] = a6;
# s6[3:, : ] = -np.dot(skew(a6),q6)
# 
#  
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# s[:,3] = s4.reshape((6))
# s[:,4] = s5.reshape((6))
# s[:,5] = s6.reshape((6))
# 
# 
# Jinv = np.linalg.inv(Jmaker(theta,s))
# thetadot = Jinv.dot(V)
# print(repr(thetadot))
# =============================================================================

#3.4.2
 
 
# =============================================================================
# theta = np.array([[0.94295313], [0.61459808], [0.47544207], [-0.13479044], [-0.14841357], [-0.10196750]])
# V = np.array([[0.01196305], [1.07160289], [0.04975675], [-0.00128864], [-0.76513490], [0.49342782]])
# 
# 
# 
# M = np.array([[1,0,0,2],
#               [0,0,-1,0],
#               [0,1,0,2],
#               [0,0,0,1]])
#      
# a1 = np.array([[0],[0],[-1]])
# q1 = np.array([[0],[0],[-2]])
# s1 = np.zeros((6,1))
# s1[:3,:] = a1;
# s1[3:, : ] = -np.dot(skew(a1),q1)
# 
# a2 = np.array([[0],[1],[0]])
# q2 = np.array([[2],[0],[-2]])
# s2= np.zeros((6,1))
# s2[:3,:] = a2;
# s2[3:, : ] = -np.dot(skew(a2),q2)
# 
#  
# a3 = np.array([[0],[0],[1]])
# q3 = np.array([[4],[0],[-2]])
# s3 = np.zeros((6,1))
# s3[:3,:] = a3;
# s3[3:, : ] = -np.dot(skew(a3),q3)
# 
# 
# a4 = np.array([[0],[1],[0]])
# q4 = np.array([[6],[0],[-2]])
# s4 = np.zeros((6,1))
# s4[:3,:] = a4;
# s4[3:, : ] = -np.dot(skew(a4),q4)
# 
# 
# 
# a5 = np.array([[0],[1],[0]])
# s5 = np.zeros((6,1))
# s5[3:,:] = a5;
#  
# a6 = np.array([[0],[0],[1]])
# q6 = np.array([[2],[0],[0]])
# s6= np.zeros((6,1))
# s6[:3,:] = a6;
# s6[3:, : ] = -np.dot(skew(a6),q6)
# 
#  
# s = np.zeros((6,theta.size))
# s[:,0] = s1.reshape((6))
# s[:,1] = s2.reshape((6))
# s[:,2] = s3.reshape((6))
# s[:,3] = s4.reshape((6))
# s[:,4] = s5.reshape((6))
# s[:,5] = s6.reshape((6))
# 
# 
# Jinv = np.linalg.inv(Jmaker(theta,s))
# T = sl.expm(vskew(s1)*theta[0]).dot(sl.expm(vskew(s2)*theta[1])).dot(sl.expm(vskew(s3)*theta[2])).dot(sl.expm(vskew(s4)*theta[3])).dot(sl.expm(vskew(s5)*theta[4])).dot(sl.expm(vskew(s6)*theta[5])).dot(M)
# V0 = admaker(T).dot(V)
# 
# thetadot = Jinv.dot(V0)
# print(repr(thetadot))
# =============================================================================

#4.1.1
 
# =============================================================================
# T_1in0 = np.array([[0.65541957, 0.65101827, -0.38288431, -0.70612477], [-0.72081359, 0.38781831, -0.57447779, 0.44688437], [-0.22550599, 0.65251220, 0.72344653, 1.01280131], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# T_init = np.identity(4)
# V_1in0in0 = dvskew(sl.logm(T_1in0.dot(nl.inv(T_init))))
# print(repr(V_1in0in0))
#  
# =============================================================================

#4.1.2
 
# =============================================================================
# T_1in0 = np.array([[0.73543481, -0.24846984, -0.63039542, -0.37294615], [0.56017837, 0.74637754, 0.35933377, -0.49024437], [0.38122938, -0.61740044, 0.68809945, 0.88843730], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# T_init = np.identity(4)
# V_1in0in0 = dvskew(sl.logm(T_1in0.dot(nl.inv(T_init))))
# V_1in0in1 = admaker(nl.inv(T_1in0)).dot(V_1in0in0)
# print(repr(V_1in0in1))
# =============================================================================


#4.1.3
 
# =============================================================================
# T_1in0 = np.array([[0.70923637, 0.43919060, -0.55144845, 0.77174924], [-0.68004019, 0.63240674, -0.37095424, -0.99539481], [0.18582010, 0.63810135, 0.74719312, -0.80476272], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# T_2in0 = np.array([[0.55986079, 0.78560626, -0.26339838, 0.60710643], [-0.81111402, 0.45468811, -0.36790321, -1.95127711], [-0.16926295, 0.41962070, 0.89177829, -0.53534338], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# V_1in0in0 = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
# print(repr(V_1in0in0))
# =============================================================================
 
#4.1.4
# =============================================================================
# T_1in0 = np.array([[0.87774145, 0.16746311, 0.44891653, 0.64690413], [-0.33233247, 0.88770601, 0.31864269, 0.73313343], [-0.34514500, -0.42887544, 0.83482979, 0.41564270], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# T_2in0 = np.array([[0.08519235, -0.58737103, 0.80482143, 0.59111659], [-0.51651768, 0.66470839, 0.53978907, 1.77715339], [-0.85202802, -0.46169040, -0.24675945, 0.41257650], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# 
# V_1in0in0 = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
# V_1in0in1 = admaker(nl.inv(T_2in0)).dot(V_1in0in0)
# print(repr(V_1in0in1))
# =============================================================================

#4.1.5
# =============================================================================
# T_2in0 = np.array([[-0.08768855, -0.44724118, 0.89010451, 0.55136163], [0.39052316, 0.80658484, 0.44374830, 5.16518566], [-0.91640732, 0.38651807, 0.10392979, 0.56545669], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# M = np.array([[ 0,  0,  1,  2], [ 0,  1,  0,  8], [-1,  0,  0,  0], [ 0,  0,  0,  1]])
# S = np.array([[ 0,  0,  0,  0,  0,  0], [ 0,  0,  1,  0,  0,  1], [-1,  0,  0, -1,  0,  0], [-2,  0,  0, -4,  0,  0], [ 0,  1,  0,  4,  0,  0], [ 0,  0,  2,  0, -1,  2]])
# theta = np.array([[.1],[.1],[.1],[.1],[.1],[.1]])
# thetadot = np.array([])
# 
# T_1in0 = TtoM(theta,S,M)
# J = Jmaker(theta,S)
# V = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
# print(V)
# 
# while nl.norm(V) >=.01:
#     print(nl.norm(V))
#     thetadot = nl.inv(J).dot(V)
#     theta = theta + thetadot*1
#     T_1in0 = TtoM(theta,S,M)
#     J = Jmaker(theta, S)
#     V = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
# print(repr(theta))
# =============================================================================


#4.2.1 & 4.2.2
# =============================================================================
# T_2in0 = np.array([[0.44638898, -0.18547278, -0.87540660, 9.69650906], [0.26228565, 0.96243592, -0.07016653, 3.52837895], [0.85553674, -0.19828502, 0.47826764, 3.60295865], [0.00000000, 0.00000000, 0.00000000, 1.00000000]])
# M = np.array([[ 1,  0,  0, 12], [ 0,  0, -1,  0], [ 0,  1,  0,  2], [ 0,  0,  0,  1]])
# S = np.array([[ 0,  0,  0,  1,  0,  0,  0,  0,  1], [ 0,  0, -1,  0,  0,  0, -1, -1,  0], [ 0, -1,  0,  0,  1,  1,  0,  0,  0], [ 0,  0, -4,  0,  0,  0,  0,  2,  0], [ 0,  0,  0, -2, -4, -6,  0,  0,  2], [-1,  0, -2,  0,  0,  0, -8, -8,  0]])
# 
# theta = np.zeros((S.shape[1],1))
# thetadot = np.array([])
# 
# T_1in0 = M
# J = Jmaker(theta,S)
# V0 = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
# V = nl.inv(admaker(T_1in0))@V0
#  
# while nl.norm(V) >=.01:
#     thetadot = td(J,V0)
#     theta = theta + thetadot*1
#     T_1in0 = TtoM(theta,S,M)
#     J = Jmaker(theta, S)
#     V0 = dvskew(sl.logm(T_2in0.dot(nl.inv(T_1in0))))
#     V = nl.inv(admaker(T_1in0))@V0
# print(nl.norm(V))
# print(repr(theta))
# =============================================================================



#5.1.1
# =============================================================================
# p_1 = np.array([[4.2935], [-2.3707], [0.6891]])
# p_2 = np.array([[4.4369], [-0.3092], [-0.9037]])
# r_1 = 0.9627
# r_2 = 1.7562
# 
# dist = np.sqrt((p_1[0]-p_2[0])**2 + (p_1[1]-p_2[1])**2 + (p_1[2]-p_2[2])**2)
# if dist < r_1 + r_2:
#     print("true")
# else:
#     print("false")
# =============================================================================
 

#5.1.2   
# =============================================================================
# p = np.array([[-2.4618, -2.7539, -0.4778, 1.8788, -0.8879, -2.8568, -1.7276, 3.1641,  4.4742, 3.0727, 3.0255, 4.8087, 1.1001, 2.7398, -1.3923, 3.3809, 4.4706,  2.4759, 4.6150], [0.6579, 1.0170, 0.1447, -4.5824, 2.4471, -1.1121, -4.5077, 4.3706,  -1.8726, -2.6840, 2.0840, -4.4398, 2.2920, -3.2560, -0.9455, 3.4239,  -1.0217, -4.8318, -3.9499], [4.8702, 4.0578, 3.0324, 4.8996, -4.6204, 1.1944, -4.9216, -4.7917,  -4.9137, 1.3460, 0.8760, -0.1623, -0.7744, 2.2349, 3.4466, -1.3811,  -2.0198, 0.7614, -2.6530]])
# r = np.array([[1.8665, 1.7621, 1.2180, 1.7200, 2.8637, 2.6827, 2.5885, 1.0225, 1.6915,  1.5538, 2.0180, 2.7764, 2.9853, 1.0205, 1.5640, 2.8953, 2.9100, 2.5727,  1.1423]])
# q = np.array([[0.0680], [-2.0432], [1.5771]])
# s = 2.0304
# 
# answer = np.zeros((1,r[0].size))
# for i in range(r[0].size):
#     dist = np.sqrt((p[0][i]-q[0])**2 + (p[1][i]-q[1])**2 + (p[2][i]-q[2])**2)
#     if dist < s + r[0][i]:
#         answer[0][i] = 1
# print(repr(answer))
# =============================================================================

#5.1.3
# =============================================================================
# S = np.array([[ 0,  0, -1,  0,  0, -1], [ 0, -1,  0,  0,  1,  0], [ 0,  0,  0,  0,  0,  0], [ 0,  0,  0, -1,  2,  0], [ 0,  0,  0,  0,  0,  2], [-1,  0, -4,  0,  0,  0]])
# M = np.array([[-1,  0,  0,  0], [ 0,  0, -1,  0], [ 0, -1,  0, -4], [ 0,  0,  0,  1]])
# theta = np.array([[-3.09209717], [2.11978287], [-2.28201646], [2.22456422], [0.41877656], [-1.83649422]])
# 
# coords = np.array([[0,0,0,0,0,0],
#                    [-2,-2,-4,-4,-2,0],
#                    [2,0,0,-2,-2,-2]])
# 
# answer = np.zeros((3,8))
# answer[0][1] = coords[0][0]
# answer[1][1] = coords[1][0]
# answer[2][1] = coords[2][0]
# 
# for i in range(S[0].size):
#     startM = np.copy(M)
#     if(i != S[0].size-1):
#         startM[0][3] = coords[0][i+1]
#         startM[1][3] = coords[1][i+1]
#         startM[2][3] = coords[2][i+1]
#     Mt = TtoM(theta[:i+1,0].reshape((i+1,1)), S[:,:i+1], startM)
#     
#     answer[0][i+2] = Mt[0][3]
#     answer[1][i+2] = Mt[1][3]
#     answer[2][i+2] = Mt[2][3]
#     
# print(repr(answer))
# =============================================================================
    
#5.1.4
# =============================================================================
# S = np.array([[ 0, -1,  0, -1,  0,  0], [ 0,  0,  0,  0,  0,  0], [ 0,  0,  1,  0,  0,  0], [ 0,  0,  4,  0,  0,  0], [ 1,  2,  0, -2,  1,  0], [ 0,  2,  0,  4,  0, -1]])
# M = np.array([[ 1,  0,  0,  0], [ 0, -1,  0,  6], [ 0,  0, -1,  0], [ 0,  0,  0,  1]])
# theta = np.array([[-1.29302249], [-1.23530881], [-0.13052305], [1.46066513], [-1.39569408], [0.03145416]])
# r = 0.90000000
# 
# coords = np.array([[0,0,0,0,0,0],[0,2,4,4,4,6],[-2,-2,-2,2,4,2]])
# 
# centers = np.zeros((3,8))
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# 
# for i in range(S[0].size):
#     startM = np.copy(M)
#     if(i != S[0].size-1):
#         startM[0][3] = coords[0][i+1]
#         startM[1][3] = coords[1][i+1]
#         startM[2][3] = coords[2][i+1]
#     Mt = TtoM(theta[:i+1,0].reshape((i+1,1)), S[:,:i+1], startM)
#     
#     centers[0][i+2] = Mt[0][3]
#     centers[1][i+2] = Mt[1][3]
#     centers[2][i+2] = Mt[2][3]
#     
# for i in range(S[0].size+2):
#     for y in range(S[0].size+2):
#         if(i == y):
#             continue
#         dist = np.sqrt((centers[0][i] - centers[0][y])**2 + (centers[1][i] - centers[1][y])**2 + (centers[2][i] - centers[2][y])**2)
#         if dist < 2*r:
#             print("true")
#             print(dist)
#             print(2*r)
#             print(i)
#             print(y)
#             break
# print("done")
# =============================================================================
    

#5.1.5
# =============================================================================
# S = np.array([[ 0,  0,  0,  0,  0,  0,  0,  0], [ 1,  0,  1,  0,  0,  0,  0,  0], [ 0,  0,  0,  0,  0,  0,  0, -1], [ 0,  0,  0,  0,  0, -1,  0,  4], [ 0,  1,  0, -1,  0,  0, -1,  0], [ 2,  0,  4,  0, -1,  0,  0,  0]])
# M = np.array([[ 0, -1,  0, -2], [ 1,  0,  0, -4], [ 0,  0,  1,  0], [ 0,  0,  0,  1]])
# theta = np.array([[-0.20, 2.42, 0.27, -2.92, -3.02, -2.29, 1.28, 2.93, -2.01, 0.02, 1.63,  -2.81, 1.57, -0.64, -1.39, 0.96, -2.24, -2.09, 3.02, -1.11], [2.04, 2.72, 2.69, 1.79, -2.46, 0.07, 1.67, 2.32, 2.79, 1.81, -3.11,  1.95, 2.96, -2.25, 0.05, -0.51, -3.14, -2.31, -2.94, 1.33], [-1.68, 2.17, 0.35, 2.76, -1.32, 2.19, -0.80, 2.83, 2.89, -3.01, -2.36,  1.66, -2.92, 2.45, 2.96, 0.03, -2.75, -1.13, 1.63, -2.36], [1.15, -0.95, 0.62, -2.93, -0.62, -1.27, -2.97, -2.95, 1.56, -2.00,  -1.79, 2.26, 0.23, -1.86, -0.09, -1.70, -0.90, -0.30, 2.48, -2.52], [-2.08, -1.69, -1.95, -0.11, -1.41, -0.46, -1.00, 2.67, -1.65, 1.46,  0.61, 0.01, 1.97, -2.80, 1.85, -1.52, 1.72, 0.73, 3.12, 0.87], [1.47, 0.07, -2.50, -0.83, 0.69, 1.99, 3.09, -2.14, 0.94, -0.66, 1.10,  -2.62, 2.43, 1.09, 3.11, -1.85, -0.99, 0.00, 2.90, 1.78], [-1.81, -1.66, 1.61, 0.97, 0.27, 2.47, -2.37, 0.34, 0.77, -0.76, -1.48,  2.43, 0.21, -0.70, 2.67, -2.72, -0.58, 2.57, 0.39, 0.15], [2.74, 2.37, -1.83, -0.05, -1.16, -0.72, -1.14, -2.85, 0.91, 3.01, 1.18,  1.01, -0.91, 3.01, -2.63, -0.80, -2.44, -0.19, 2.99, 2.55]])
# r = 0.90000000
# 
# 
# coords = np.array([[2,4,4,6,6,4,2,0],
#                    [0,0,2,2,-2, -2,-2,-4],
#                    [0,0,0,0,0,0,0,0]])
# 
# centers = np.zeros((3,S[0].size+2))
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# 
# answer = np.zeros((1,theta[0].size))
# 
# for t in range(theta[0].size):
#     for i in range(S[0].size):
#         startM = np.copy(M)
#         if(i != S[0].size-1):
#             startM[0][3] = coords[0][i+1]
#             startM[1][3] = coords[1][i+1]
#             startM[2][3] = coords[2][i+1]
#         Mt = TtoM(theta[:i+1,t].reshape((i+1,1)), S[:,:i+1], startM)
#         
#         centers[0][i+2] = Mt[0][3]
#         centers[1][i+2] = Mt[1][3]
#         centers[2][i+2] = Mt[2][3] 
#     for l in range(S[0].size+1):
#         for y in range(l+1,S[0].size+2):
#             dist = nl.norm(centers[:,l] - centers[:,y])
#             #dist = np.sqrt((centers[0][l] - centers[0][y])**2 + (centers[1][l] - centers[1][y])**2 + (centers[2][l] - centers[2][y])**2)
#             if dist < 2*r:
#                 answer[0][t] = 1
#                 
# print(repr(answer))
# =============================================================================

#5.2.1  this implimanetation is wrong
# =============================================================================
# S = np.array([[ 0,  0,  0,  0], [ 0,  0, -1,  0], [ 1,  0,  0, -1], [ 0,  1,  2,  0], [ 0,  0,  0,  4], [ 0,  0, -4,  0]])
# M = np.array([[ 0,  0,  1,  6], [ 0, -1,  0,  0], [ 1,  0,  0,  0], [ 0,  0,  0,  1]])
# p_robot = np.array([[0, 0, 2, 4, 4, 6], [0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0]])
# r_robot = np.array([[0.90, 0.90, 0.90, 0.90, 0.90, 0.90]])
# p_obstacle = np.array([[0.45, -5.16, 1.46, -3.14, -6.52, 8.32, 8.73, -8.26, -5.29, -6.39, 9.96,  3.84, -6.34, 3.69, -5.59, -4.09, 9.22, 3.13, 3.48, -1.70, 0.60, -9.10,  7.02, -1.19, -1.96, 7.04, -5.17, 9.92], [-3.56, -9.82, 4.89, 9.71, -3.98, -6.57, 8.93, -7.34, 6.68, 5.66, -9.28,  -3.39, -0.58, -5.25, -0.90, 2.95, 6.56, 9.48, -4.73, 4.76, -7.58, -1.18,  -7.61, 4.68, -9.71, 4.15, 8.95, -5.79], [-5.78, -6.27, 6.21, 8.17, -3.82, 8.10, 5.40, -4.80, 8.58, 7.23, 2.52,  -0.22, 3.90, 2.01, 4.19, -3.55, -3.70, 5.62, 0.66, 4.16, 8.75, 4.23,  -0.89, -2.72, -0.18, -6.41, -8.56, 8.39]])
# r_obstacle = np.array([[3.21, 4.38, 4.78, 4.33, 3.26, 3.77, 2.36, 2.47, 2.41, 4.29, 2.69, 1.62,  3.22, 2.52, 2.95, 4.99, 2.75, 0.95, 1.31, 4.04, 3.64, 2.17, 3.27, 1.47,  3.83, 3.56, 3.87, 5.00]])
# theta = np.array([[-3.05], [-0.48], [-0.87], [1.24]])
# 
# 
# coords = np.array([[0,0,0,0,0],
#                    [2,4,6,8,8],
#                    [0,0,0,0,2]])
# r = np.zeros(r_robot.size+r_obstacle.size)
# r[:r_robot.size] = np.copy(r_robot)
# r[r_robot.size:] = np.copy(r_obstacle)
# 
# centers = np.zeros((3,S[0].size+2+p_obstacle[0].size))
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# centers[:,S[0].size+2:] = np.copy(p_obstacle[:,:])
# 
# answer = np.zeros((1,r.size))
# 
# for t in range(theta[0].size):
#     for i in range(S[0].size):
#         startM = np.copy(M)
#         if(i != S[0].size-1):
#             startM[0][3] = coords[0][i+1]
#             startM[1][3] = coords[1][i+1]
#             startM[2][3] = coords[2][i+1]
#         Mt = TtoM(theta[:i+1,t].reshape((i+1,1)), S[:,:i+1], startM)
#         
#         centers[0][i+2] = Mt[0][3]
#         centers[1][i+2] = Mt[1][3]
#         centers[2][i+2] = Mt[2][3] 
#     for l in range(r.size-1):
#         for y in range(l+1,r.size):
#             dist = nl.norm(centers[:,l] - centers[:,y])
#             #dist = np.sqrt((centers[0][l] - centers[0][y])**2 + (centers[1][l] - centers[1][y])**2 + (centers[2][l] - centers[2][y])**2)
#             if dist < r[y]*r[l]:
#                 answer[0][t] = 1
#                 
# print(repr(answer))
# =============================================================================


#5.2.2
# =============================================================================
# S = np.array([[ 1,  0,  0,  1,  0,  0,  0], [ 0,  0,  0,  0,  0,  1,  0], [ 0,  0,  0,  0,  1,  0,  1], [ 0,  0,  1,  0,  0,  4,  2], [-2, -1,  0, -6,  0,  0,  0], [ 0,  0,  0,  0,  0,  0,  0]])
# M = np.array([[ 0,  0, -1,  0], [ 0,  1,  0,  4], [ 1,  0,  0, -2], [ 0,  0,  0,  1]])
# p_robot = np.array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0], [ 0,  0, -2, -2,  0,  0,  2,  2,  4], [ 0, -2, -4, -6, -6, -4, -4, -2, -2]])
# r_robot = np.array([[0.90, 0.90, 0.90, 0.90, 0.90, 0.90, 0.90, 0.90, 0.90]])
# p_obstacle = np.array([[1.89, 1.32, -6.86, -8.04, -3.47, 6.24, -5.63, -3.19, -6.90, 9.18, -6.86,  -2.51, -7.01], [-4.63, 9.89, -3.58, 6.81, -5.85, -8.16, 1.15, -6.71, 7.99, -0.62, -7.36,  -9.74, 5.91], [-5.49, -1.02, -9.99, 1.88, -1.41, 7.03, 3.89, -5.94, -4.89, 7.73, -4.95,  0.98, 7.46]])
# r_obstacle = np.array([[2.75, 1.82, 4.18, 2.65, 2.53, 1.87, 1.42, 4.08, 3.03, 4.73, 4.79, 3.69,  2.48]])
# theta = np.array([[2.21, 1.50, -0.06, 2.47, 1.02, 0.79, 1.47, 0.48, 1.13, -2.13, 2.63,  2.94, 0.10, -0.55, -1.37], [-2.79, 2.24, -0.98, -1.60, 0.04, -2.94, 1.84, -0.30, -2.82, 0.73, -0.50,  -0.65, -1.37, -0.69, -2.83], [-2.57, 1.29, 2.77, -0.57, 2.24, -1.08, -1.74, 1.89, -2.89, -0.12, -1.21,  -1.10, 2.77, -0.99, 0.13], [-0.29, -3.01, -1.35, -0.55, 0.43, -1.82, 1.97, -2.79, -0.06, -1.87,  2.35, 1.53, 1.40, 2.65, 2.32], [0.66, -2.70, 1.93, -0.84, 0.12, 0.06, -2.02, -2.03, 0.62, 2.89, -0.76,  -2.78, -0.63, -1.83, -2.88], [2.58, 0.65, -1.03, 0.80, -0.16, -1.68, 2.29, 1.15, 1.89, 2.46, 1.27,  1.07, 1.61, 0.44, -1.51], [1.24, -2.98, -2.91, 1.07, 0.70, 1.83, -1.22, -0.46, 0.76, -1.58, 0.91,  2.95, -3.14, -0.60, 0.72]])
# 
#     
# coords = np.array([np.copy(p_robot[0,1:-1]),
#                    np.copy(p_robot[1,1:-1]),
#                    np.copy(p_robot[2,1:-1])])
#     
# #print(coords)
# 
# 
# r = np.zeros((1,r_robot.size+r_obstacle.size))
# r[0,:r_robot.size] = np.copy(r_robot)
# r[0,r_robot.size:] = np.copy(r_obstacle)
# print(r.size)
# #print(r)
# 
# centers = np.zeros((3,r.size))
# 
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# 
# centers[:,r_robot.size:] = np.copy(p_obstacle)
# 
# #print(centers)
# 
# 
# answer = np.zeros((1,theta[0].size))
# 
# for t in range(theta[0].size):
#     for i in range(S[0].size):
#         startM = np.copy(M)
#         if(i != S[0].size-1):
#             startM[0][3] = coords[0][i+1]
#             startM[1][3] = coords[1][i+1]
#             startM[2][3] = coords[2][i+1]
#         Mt = TtoM(theta[:i+1,t].reshape((i+1,1)), S[:,:i+1], startM)
#         
#         centers[0][i+2] = Mt[0][3]
#         centers[1][i+2] = Mt[1][3]
#         centers[2][i+2] = Mt[2][3] 
#     for l in range(S[0].size+2):
#         for y in range(l+1,r.size):
#             dist = nl.norm(centers[:,l] - centers[:,y])
#             #dist = np.sqrt((centers[0][l] - centers[0][y])**2 + (centers[1][l] - centers[1][y])**2 + (centers[2][l] - centers[2][y])**2)
#             if dist < r[0][l]+r[0][y]:
#                 answer[0][t] = 1
# 
#                 
# print(repr(answer))
# =============================================================================

#5.2.3
# =============================================================================
# S = np.array([[ 0,  0,  0, -1], [ 0,  0, -1,  0], [ 1,  0,  0,  0], [ 0,  0,  2,  0], [-2, -1,  0, -2], [ 0,  0, -4,  0]])
# M = np.array([[ 0, -1,  0,  0], [ 0,  0, -1,  0], [ 1,  0,  0,  4], [ 0,  0,  0,  1]])
# p_robot = np.array([[0, 2, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 4]])
# r_robot = np.array([[0.90, 0.90, 0.90, 0.90, 0.90, 0.90]])
# p_obstacle = np.array([[2.18, 4.97, -3.97, -1.88, 4.93, -4.22, -4.62, 2.12, -4.50, -5.00, 4.88,  0.83, -0.43, 4.77, -2.22, 4.36, -4.67, -3.93, -3.13, -4.59, -3.78, 1.69,  3.52, 0.06, 3.43], [4.70, -0.45, 0.19, -2.97, -4.87, 4.72, -4.79, -2.36, 3.95, -1.00, -1.19,  -0.36, 2.36, 4.73, 1.76, -4.12, -4.28, -1.55, -1.34, 0.42, 1.79, 2.71,  0.97, -4.33, 3.87], [-3.28, -4.68, -2.54, -4.76, 0.89, -1.43, 1.17, 4.23, 1.77, -3.78, -3.61,  4.21, -4.73, 0.76, -3.14, 2.02, 0.09, 0.70, -0.37, -0.27, 0.41, -2.56,  -4.89, -0.18, -4.02]])
# r_obstacle = np.array([[3.21, 3.33, 3.01, 3.26, 2.33, 2.76, 1.23, 0.74, 3.01, 2.60, 2.50, 0.75,  2.61, 0.69, 0.67, 0.83, 1.21, 1.62, 1.27, 2.81, 3.28, 0.78, 3.79, 1.62,  1.76]])
# theta_a = np.array([[-1.79], [2.22], [-1.92], [-1.01]])
# theta_b = np.array([[2.20], [-0.48], [-2.47], [2.84]])
# 
# for i in range(100):
#     s = 1 - i*.01
#     theta = (1-s)*theta_a+s*theta_b
#     if(col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta)):
#         print(s)
#         break
# print("done")
# =============================================================================



#5.2.4
# =============================================================================
# S = np.array([[ 0,  0,  0,  0], [ 1,  0,  1,  0], [ 0,  0,  0,  0], [ 0,  1,  0,  1], [ 0,  0,  0,  0], [-8,  0, -6,  0]])
# M = np.array([[ 1,  0,  0, -2], [ 0,  1,  0,  2], [ 0,  0,  1,  0], [ 0,  0,  0,  1]])
# p_robot = np.array([[ 0, -8, -8, -6, -4, -2], [ 0, -2,  0,  2,  2,  2], [ 0,  0,  0,  0,  0,  0]])
# r_robot = np.array([[0.90, 0.90, 0.90, 0.90, 0.90, 0.90]])
# p_obstacle = np.array([[3.10, 3.73, -4.11, -3.56, 0.85, 4.80, 3.34, 2.93, 3.13, -3.13, 3.70,  4.90, -3.98, 3.13, 4.70, 0.40, 4.00, 4.80, 3.50], [-2.36, 2.77, -2.45, -1.67, -3.93, -2.43, 0.66, -0.50, 3.95, -3.48, 0.33,  -0.61, -3.29, -4.42, -3.42, -2.92, 4.48, 0.98, 3.92], [-2.85, -0.09, 0.73, -2.04, -1.81, 3.75, -4.26, -4.74, 0.83, -4.32, 3.97,  2.41, 3.52, 0.37, -1.28, -4.06, 3.60, 0.15, 2.61]])
# r_obstacle = np.array([[3.67, 3.57, 2.06, 1.64, 1.00, 1.56, 2.61, 1.55, 1.06, 0.58, 0.84, 0.79,  0.75, 3.59, 4.59, 3.30, 2.25, 1.95, 4.43]])
# theta_start = np.array([[-2.02, 0.87, 0.11, 2.75, -2.96, 1.70, -2.96, 1.27, 0.55], [2.51, -2.60, -0.18, 2.18, -1.17, 1.91, -2.74, -1.14, 0.27], [0.40, 0.77, 0.90, 2.82, 1.22, -2.23, 2.30, 2.74, 2.37], [0.88, 2.86, -0.05, 0.64, -0.08, 1.10, 0.22, 1.90, 2.64]])
# theta_goal = np.array([[-1.69, 0.27, -1.91, 1.79, 2.40, -2.90, 2.53, 2.14, -1.17], [-0.19, -0.29, -0.98, -2.68, 1.02, 1.66, -1.10, 2.55, 1.47], [0.51, 2.64, -0.60, 1.62, 0.64, 1.44, 0.10, 1.38, 0.69], [2.22, 1.35, 2.01, 2.09, 0.26, 1.61, 0.22, 0.71, 2.81]])
# 
# collisions = np.zeros((1,theta_start[0].size))
# for y in range(theta_goal[0].size):
#     for i in range(100):
#         s = 1 - i*.01
#         theta = (1-s)*theta_start[:,y]+s*theta_goal[:,y]
#         if(col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, theta)):
#             collisions[0][y] = s
#             break
# print(repr(collisions))
# =============================================================================
  


#5.3.2
'''
S = np.array([[ 0, -1,  0], [ 0,  0,  0], [ 0,  0,  1], [ 1,  0, -4], [ 0,  0,  4], [ 0, -4,  0]])
M = np.array([[ 0,  0, -1, -6], [-1,  0,  0, -4], [ 0,  1,  0,  0], [ 0,  0,  0,  1]])
p_robot = np.array([[ 0,  0,  0, -4, -6], [ 0, -2, -4, -4, -4], [ 0,  0,  0,  0,  0]])
r_robot = np.array([[0.90, 0.90, 0.90, 0.90, 0.90]])
p_obstacle = np.array([[-0.63, 2.39, 0.63, -0.82, -4.90, -2.91, 2.02, 3.36, -2.38, 2.70, -0.98,  2.73, -4.17, -1.25, 0.02, 4.87, 1.95, 2.25, -3.74], [3.02, -4.19, -1.70, 2.89, -0.62, 2.17, -1.49, 3.18, 2.48, 1.80, -2.21,  -2.76, -4.35, 4.44, -4.67, 0.50, 0.50, -0.01, -4.27], [-3.64, -4.93, 2.15, 3.08, -3.93, -1.49, -4.23, 0.98, -1.82, 1.45, -3.55,  3.01, 2.78, 1.99, 2.86, -2.68, 3.00, -2.11, 4.11]])
r_obstacle = np.array([[1.89, 1.61, 0.60, 0.62, 1.63, 0.80, 3.35, 3.53, 1.97, 2.07, 1.79, 1.52,  0.70, 2.15, 0.91, 3.30, 1.90, 1.21, 2.43]])
theta_start = np.array([[2.60], [1.92], [0.25]])
theta_goal = np.array([[-1.88], [2.59], [2.70]])


class Tree(object):
    def __init__(self):
        self.theta = None
        self.parent = None
        self.start = None

rootStart = Tree()
rootStart.theta = np.copy(theta_start)
rootStart.start = True

rootEnd = Tree()
rootEnd.theta = np.copy(theta_goal)
rootEnd.start = False

accepted = np.array([rootStart, rootEnd])
if(lineClear(S, M, p_robot, r_robot, p_obstacle, r_obstacle, rootStart.theta, rootEnd.theta)):
    answer = np.concatenate((theta_start,theta_goal),axis=1)
    print(repr(answer))
else:
    notFound = True
    while(notFound):  
        tempTheta = np.zeros((theta_start[:,0].size,1))
        for i in range(theta_start[:,0].size):
            tempTheta[i][0] = random.uniform(-3.14, 3.14)
        if(col_det(S, M, p_robot, r_robot, p_obstacle, r_obstacle, tempTheta)):
            continue
        tempT  = TtoM(tempTheta,S,M)
        currentClosest = accepted[0]
        currentDistance = nl.norm(rootStart.theta - tempTheta)
        for i in range(1,accepted.size):
            dist = nl.norm(accepted[i].theta - tempTheta)
            if dist < currentDistance:
                currentDistance = dist
                currentClosest = accepted[i]
        if(lineClear(S, M, p_robot, r_robot, p_obstacle, r_obstacle, currentClosest.theta, tempTheta)):
            node = Tree()
            node.theta = np.copy(tempTheta)
            node.parent = currentClosest
            node.start = currentClosest.start
            secondClosest = None
            secondClosestDist = np.inf
            for ele in accepted:
                if ele.start != node.start:
                    tempDist = nl.norm(ele.theta - node.theta)
                    if tempDist < secondClosestDist:
                        secondClosest = ele
                        secondClosestDist = tempDist
            if(lineClear(S, M, p_robot, r_robot, p_obstacle, r_obstacle, node.theta, secondClosest.theta)):
                        fromStart = node
                        fromEnd = secondClosest
                        if(secondClosest.start):
                            fromStart = secondClosest
                            fromEnd = node
                        answer = np.concatenate((fromStart.theta, fromEnd.theta),axis = 1)
                        while(fromStart.parent is not None):
                            fromStart = fromStart.parent
                            answer = np.concatenate((fromStart.theta, answer),axis = 1)
                        while(fromEnd.parent is not None):
                            fromEnd = fromEnd.parent
                            answer = np.concatenate((answer, fromEnd.theta),axis = 1)
                        #print(repr(answer))
                        notFound = False
                        break
            accepted = np.append(accepted, copy.copy(node))
print(repr(answer))
'''


#IGNORE:
# =============================================================================
# toCheck = np.array([[-0.86      , -1.46163248, -0.99813078, -1.039004  ,  1.06931115,
#          1.06      ],
#        [ 0.01      , -0.0478678 , -1.36753732, -2.42495884, -1.75184169,
#         -1.86      ],
#        [-2.74      , -0.02349352, -0.83182966, -2.48439269, -0.94701691,
#          0.93      ],
#        [ 0.95      ,  0.53137827,  2.17678289,  2.58827382,  2.24518477,
#          1.1       ],
#        [ 1.58      , -1.86014034, -1.3196643 , -0.67968825,  0.5445415 ,
#          0.93      ],
#        [ 0.6       ,  1.13068787,  1.08136958,  1.69951198, -1.62375479,
#         -1.24      ],
#        [ 2.14      ,  1.89326915,  2.81843057,  3.10637001,  1.58659929,
#          2.52      ]])
# print(checkS(toCheck, 0, 1, M, p_robot, r_robot, p_obstacle, r_obstacle, 0.369565))
# #checkS(answer, one, two , M, p_robot, r_robot, p_obstacle, r_obstacle, s)
# =============================================================================
