%% HW5.1.5. Detect self-collision at several different configurations

% characterize the robot
S = [1.00000000 0.00000000 1.00000000 0.00000000 0.00000000 0.00000000; 0.00000000 0.00000000 0.00000000 0.00000000 1.00000000 1.00000000; 0.00000000 0.00000000 0.00000000 1.00000000 0.00000000 0.00000000; 0.00000000 0.00000000 0.00000000 6.00000000 2.00000000 6.00000000; 0.00000000 1.00000000 -2.00000000 0.00000000 0.00000000 0.00000000; -2.00000000 0.00000000 -4.00000000 0.00000000 0.00000000 0.00000000];
M = [0.00000000 -1.00000000 0.00000000 0.00000000; 1.00000000 0.00000000 0.00000000 10.00000000; 0.00000000 0.00000000 1.00000000 -6.00000000; 0.00000000 0.00000000 0.00000000 1.00000000];
theta = [-1.06548943 2.82025624 -0.40233544 2.49569446 -2.43815108 -1.21882400 -1.69009797 -0.64922359 -2.21310995 2.58731020 -2.40003722 2.60837468 0.98316564 0.78792759 2.32546025 -1.93079681 1.53321934 -0.21944165 -0.75521800; -2.46683245 -2.50859716 -2.01961490 -0.66044583 0.73017985 3.00781431 0.45230051 -0.26524413 0.82783201 2.70884149 2.51183464 1.48227736 -2.44575502 2.74567776 0.56793186 0.31737671 -0.69634689 -0.19377133 -1.92907066; 1.77796272 1.04866320 1.71224813 -1.09847792 -2.59677764 0.69373224 -0.17752105 0.80415228 -1.60834309 0.12310324 0.03949857 -1.08607720 2.91140765 2.25369757 0.18524826 -0.31079851 2.47565332 -0.14826727 -0.02181043; 0.91711166 2.97250785 -2.76585501 1.89499685 -1.51270977 1.68405474 3.04899080 1.84664883 1.01436687 2.03320134 -0.13128818 -2.08367893 -3.01711116 1.87788770 2.03145411 1.15990551 2.38942819 1.54676346 -0.50935460; 3.01538770 -0.13112482 -2.88046214 0.23857979 -3.13025034 -0.83647358 0.88719776 2.49236329 -1.35413019 1.32688512 0.47706044 -1.16167513 2.90385460 -0.28007211 -2.58137584 0.76920672 0.67521360 -0.89333953 2.73059630; 1.16855263 -2.92602126 -1.73612689 -0.80206014 0.42965202 -1.08733936 -1.18556280 0.28338348 1.77999855 2.26551991 -2.74466127 0.38033880 -1.09583253 -2.71131833 -1.85796189 0.55923680 -0.81000287 -2.47617912 0.85666914];
r = 0.90000000;
r_vec = r*ones(1, num_spheres);
num_spheres = 8;

% find the starting position of the center of each sphere
p = zeros(3, num_spheres);

%{
p(:,1) = [0;0;0];
p(:,2) = [0;0;0];
p(:,3) = [0;0;0];
p(:,4) = [0;0;0];
p(:,5) = [0;0;0];
p(:,6) = [0;0;0];
p(:,7) = [0;0;0];
p(:,8) = [0;0;0];
%}

p(:,1) = [0;0;0];
p(:,2) = [0;2;0];
p(:,3) = [0;2;-2];
p(:,4) = [0;4;-2];
p(:,5) = [0;6;-2];
p(:,6) = [0;8;-2];
p(:,7) = [0;8;-6];
p(:,8) = [0;10;-6];

% augment the points so we can use a transformation matrix
z = ones(1, num_spheres);
pAugInit = [p;z];
T = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% start the loop to take the robot to each position described by the columns of theta
% and check for collision

% for each position, this will show if there are any collisions
coll = zeros(1,size(theta)(2));

for k = 1:size(theta)(2)
collFlag = 0;
thetaLocal = theta(:,k);

% move the joints by using the transformation matrix
% the first two spheres aren't moved by any joints
pAugFinal(:,1) = pAugInit(:,1);
pAugFinal(:,2) = pAugInit(:,2);

T = 1;
for i = 1:size(S)(1)
    % move the center of each sphere by only the joints that affect it
    trans = expm(skew4(S(:,i))*thetaLocal(i));
    T = T*trans;
    pAugFinal(:,i+2) = T * pAugInit(:, i+2);
end

% now we have the centers of the spheres at the position described by theta
pFinal = pAugFinal(1:3, :);

for i = 1:num_spheres
    for j = 1:num_spheres
        % check if each sphere is colliding with any of the others, except itself
        if (i == j)
            continue
        else       
            x1 = norm(pFinal(:,i) - pFinal(:,j));
            x2 = r_vec(i)+r_vec(j);
            
            if (x1 <= x2)
                %fprintf("in collision\n");
                collFlag = 1;
            else
                %fprintf("not in collision\n")
            end
        end
    end
end

if collFlag == 1
    coll(k) = 1;
end

end
coll

c = [1 0 1 1 0 0 1 1 0 1 0 1 0 0 0 0 0 0 0]
